(function(){"use strict";var __webpack_modules__={734:function(){eval('\n// UNUSED EXPORTS: startApp\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n;// CONCATENATED MODULE: ./src/ts/config.ts\n// settings\nvar config = {\n  valueRows: 5,\n  minRows: 3,\n  maxRows: 20,\n  stepRows: 1,\n  valueCols: 5,\n  minCols: 3,\n  maxCols: 20,\n  stepCols: 1,\n  valueRange: 3,\n  minRange: 1,\n  maxRange: 5,\n  stepRange: 1,\n  interval: 1000\n};\n/* harmony default export */ const ts_config = (config);\n;// CONCATENATED MODULE: ./src/ts/storage.ts\n\nfunction storageArrayAliveSave(arrayAlive) {\n  localStorage.setItem("arrayAlive", JSON.stringify(arrayAlive));\n}\nfunction getStorageArrayAlive() {\n  return JSON.parse(localStorage.getItem("arrayAlive"));\n}\nfunction storageConfig(configData) {\n  localStorage.setItem("config", JSON.stringify(configData));\n}\nfunction storage_getStorageConfig() {\n  var configData = JSON.parse(localStorage.getItem("config"));\n\n  if (configData === null) {\n    configData = {\n      valueRows: ts_config.valueRows,\n      minRows: ts_config.minRows,\n      maxRows: ts_config.maxRows,\n      stepRows: ts_config.stepRows,\n      valueCols: ts_config.valueCols,\n      minCols: ts_config.minCols,\n      maxCols: ts_config.maxCols,\n      stepCols: ts_config.stepCols,\n      valueRange: ts_config.valueRange,\n      minRange: ts_config.minRange,\n      maxRange: ts_config.maxRange,\n      stepRange: ts_config.stepRange,\n      interval: ts_config.interval\n    };\n    storageConfig(configData);\n  }\n\n  return configData;\n}\n;// CONCATENATED MODULE: ./src/ts/extraFunctions.ts\n\nfunction getAliveList(row, col) {\n  var aliveListEmpty = [];\n\n  for (var i = 0; i < row; i += 1) {\n    aliveListEmpty[i] = [];\n\n    for (var j = 0; j < col; j += 1) {\n      aliveListEmpty[i][j] = 0;\n    }\n  }\n\n  return aliveListEmpty;\n}\nfunction counterAroundCell(rowCurent, colCurent) {\n  var aliveCell = getStorageArrayAlive();\n  var configData = storage_getStorageConfig();\n  var sum = 0;\n  var rowStart;\n  var rowFinish;\n  var colStart;\n  var colFinish;\n\n  if (rowCurent - 1 < 0) {\n    rowStart = 0;\n  } else {\n    rowStart = rowCurent - 1;\n  }\n\n  if (rowCurent + 1 >= configData.valueRows) {\n    rowFinish = rowCurent;\n  } else {\n    rowFinish = rowCurent + 1;\n  }\n\n  if (colCurent - 1 < 0) {\n    colStart = 0;\n  } else {\n    colStart = colCurent - 1;\n  }\n\n  if (colCurent + 1 >= configData.valueCols) {\n    colFinish = colCurent;\n  } else {\n    colFinish = colCurent + 1;\n  }\n\n  for (var i = rowStart; i <= rowFinish; i += 1) {\n    for (var j = colStart; j <= colFinish; j += 1) {\n      if (i !== rowCurent || j !== colCurent) {\n        sum += Number(aliveCell[i][j]);\n      }\n    }\n  }\n\n  return sum;\n}\nfunction setConditionCell(arrayCounters, row, col) {\n  var arrayAlive = getStorageArrayAlive();\n  var arrayAliveNew = getAliveList(row, col);\n\n  for (var i = 0; i < row; i += 1) {\n    for (var j = 0; j < col; j += 1) {\n      if (arrayAlive[i][j] === 1) {\n        if (arrayCounters[i][j] < 2 || arrayCounters[i][j] > 3) {\n          arrayAliveNew[i][j] = 0;\n        } else {\n          arrayAliveNew[i][j] = 1;\n        }\n      } else if (arrayCounters[i][j] === 3) {\n        arrayAliveNew[i][j] = 1;\n      }\n    }\n  }\n\n  return arrayAliveNew;\n}\nfunction getInterval(value) {\n  var intervalArray = [2500, 2000, 1500, 1000, 500];\n  return intervalArray[value - 1];\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n;// CONCATENATED MODULE: ./src/ts/control.ts\n\n\n\nfunction getMarkupTable(arrayAlive, tbl) {\n  var table = tbl;\n  table.innerHTML = "";\n  var classes = "cell cell_alive".split(" ");\n\n  for (var i = 0; i < arrayAlive.length; i += 1) {\n    var tr = document.createElement("tr");\n    table.appendChild(tr).setAttribute("class", "row");\n\n    for (var j = 0; j < arrayAlive[i].length; j += 1) {\n      var td = document.createElement("td");\n      tr.appendChild(td).setAttribute("class", "cell");\n      td.dataset.row = "".concat(i);\n      td.dataset.col = "".concat(j);\n\n      if (arrayAlive[i][j] === 1) {\n        var _td$classList;\n\n        (_td$classList = td.classList).add.apply(_td$classList, _toConsumableArray(classes));\n      }\n    }\n  }\n}\nfunction getPosClick(event) {\n  var cell = event.target;\n  var coordY = cell.dataset.row;\n  var coordX = cell.dataset.col;\n  return [coordY, coordX];\n}\nfunction getToggleClass(coords) {\n  var coordsY = Number(coords[0]);\n  var coordsX = Number(coords[1]);\n  var cell = document.querySelectorAll("td[data-row=\'".concat(coordsY, "\'][data-col=\'").concat(coordsX, "\']"));\n  cell[0].classList.toggle("cell_alive");\n}\nfunction getNewAliveList(coordNew) {\n  var array = getStorageArrayAlive();\n  var row = Number(coordNew[0]);\n  var col = Number(coordNew[1]);\n  var arrayNew = array.slice();\n\n  if (array[row][col]) {\n    arrayNew[row][col] = 0;\n  } else {\n    arrayNew[row][col] = 1;\n  }\n\n  return arrayNew;\n}\nfunction clearTable() {\n  var table = document.querySelector("#table");\n  var cellsAlive = table.querySelectorAll("td.cell_alive");\n\n  for (var i = 0; i < cellsAlive.length; i += 1) {\n    cellsAlive[i].classList.remove("cell_alive");\n  }\n}\nfunction getCountAliveCells() {\n  var table = document.querySelector("#table");\n  return table.querySelectorAll("td.cell_alive").length;\n}\nfunction handleButton(numberAlive, btn) {\n  var button = btn;\n\n  if (numberAlive <= 0) {\n    button.disabled = true;\n  } else {\n    button.disabled = false;\n  }\n}\nfunction handleInput(isDisabled, int) {\n  var input = int;\n\n  if (isDisabled) {\n    input.disabled = true;\n  } else {\n    input.disabled = false;\n  }\n}\nfunction getUpdateArray(row, col) {\n  var counterAliveAround = getAliveList(row, col);\n\n  for (var i = 0; i < row; i += 1) {\n    for (var j = 0; j < col; j += 1) {\n      counterAliveAround[i][j] = counterAroundCell(i, j);\n    }\n  }\n\n  return setConditionCell(counterAliveAround, row, col);\n}\nfunction getUpdateTable(row, col) {\n  var arrayAlive = getStorageArrayAlive();\n\n  for (var i = 0; i < row; i += 1) {\n    for (var j = 0; j < col; j += 1) {\n      var cell = document.querySelectorAll("td[data-row=\'".concat(i, "\'][data-col=\'").concat(j, "\']"));\n      cell[0].classList.remove("cell_alive");\n\n      if (arrayAlive[i][j] === 1) {\n        cell[0].classList.add("cell_alive");\n      }\n    }\n  }\n}\nfunction toEqualArr(array1, array2) {\n  return array1.every(function (value1, i) {\n    return array1[i].every(function (value2, j) {\n      return value2 === array2[i][j];\n    });\n  });\n}\nfunction getChangeTable(row, col, newValue, isRow) {\n  var newValueNum = newValue;\n  var arrayAlive = getStorageArrayAlive();\n  var configData = storage_getStorageConfig();\n\n  if (isRow) {\n    var rowField = document.getElementById("rowField");\n\n    if (row >= newValueNum) {\n      if (newValueNum < configData.minRows) {\n        newValueNum = configData.minRows;\n        rowField.value = String(newValueNum);\n      }\n\n      var delCell = row - newValueNum;\n      arrayAlive.splice(arrayAlive.length - delCell, delCell);\n    } else {\n      if (newValueNum > configData.maxRows) {\n        newValueNum = configData.maxRows;\n        rowField.value = String(newValueNum);\n      }\n\n      for (var j = row; j < newValueNum; j += 1) {\n        arrayAlive.push([]);\n\n        for (var i = 0; i < col; i += 1) {\n          arrayAlive[j].push(0);\n        }\n      }\n    }\n  } else {\n    var colField = document.getElementById("colField");\n\n    for (var _i = 0; _i < row; _i += 1) {\n      if (col >= newValueNum) {\n        if (newValueNum < configData.minCols) {\n          newValueNum = configData.minCols;\n          colField.value = String(newValueNum);\n        }\n\n        var _delCell = col - newValueNum;\n\n        arrayAlive[_i].splice(arrayAlive[_i].length - _delCell, _delCell);\n      } else {\n        if (newValueNum > configData.maxCols) {\n          newValueNum = configData.maxCols;\n          colField.value = String(newValueNum);\n        }\n\n        for (var _j = col; _j < newValueNum; _j += 1) {\n          arrayAlive[_i].push(0);\n        }\n      }\n    }\n  }\n\n  storageArrayAliveSave(arrayAlive);\n  return arrayAlive;\n}\nfunction getActualTable(table) {\n  var numRows = table.querySelectorAll("tr").length;\n  var arrRows = table.querySelectorAll("tr");\n  var numCols = arrRows[0].querySelectorAll("td").length;\n  return [Number(numRows), Number(numCols)];\n}\nfunction control_getInterval() {\n  var configData = getStorageConfig();\n  return configData.interval;\n}\n;// CONCATENATED MODULE: ./src/ts/main.ts\n\n\n\n\n\nvar timerId;\nvar aliveCell = [];\nfunction handlerTableClick(event, buttonStart, buttonClear) {\n  var coords = getPosClick(event);\n  getToggleClass(coords);\n  var numberAlive = getCountAliveCells();\n  handleButton(numberAlive, buttonClear);\n  handleButton(numberAlive, buttonStart);\n  var aliveListNew = getNewAliveList(coords);\n  storageArrayAliveSave(aliveListNew);\n}\nfunction tick(table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField) {\n  var arr = getStorageArrayAlive();\n  var configData = storage_getStorageConfig();\n  var timeInterval = configData.interval;\n  var row = configData.valueRows;\n  var col = configData.valueCols;\n  aliveCell = getUpdateArray(row, col);\n  getUpdateTable(row, col);\n  storageArrayAliveSave(aliveCell);\n  var equalArr = toEqualArr(arr, aliveCell);\n\n  if (getCountAliveCells() <= 0) {\n    clearTimeout(timerId);\n    getAliveList(row, col);\n    handleButton(0, buttonStop);\n    handleInput(false, rowField);\n    handleInput(false, colField);\n  } else if (equalArr) {\n    clearTimeout(timerId);\n    getAliveList(row, col);\n    handleButton(0, buttonStop);\n    handleButton(1, buttonStart);\n    handleButton(1, buttonClear);\n    handleInput(false, rowField);\n    handleInput(false, colField);\n  } else {\n    timerId = window.setTimeout(tick, timeInterval, table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField);\n  }\n}\nfunction getStart(table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField) {\n  var configData = storage_getStorageConfig();\n  var interval = configData.valueRange;\n  var numberAlive = getCountAliveCells();\n  handleButton(numberAlive, buttonStop);\n  handleButton(0, buttonClear);\n  handleButton(0, buttonStart);\n  handleInput(true, rowField);\n  handleInput(true, colField);\n  setTimeout(tick, interval, table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField);\n}\nfunction getStop(buttonStop, buttonStart, buttonClear, rowField, colField) {\n  var numberAlive = getCountAliveCells();\n  clearTimeout(timerId);\n  handleButton(0, buttonStop);\n  handleButton(numberAlive, buttonClear);\n  handleButton(numberAlive, buttonStart);\n  handleInput(false, rowField);\n  handleInput(false, colField);\n}\nfunction getClear(buttonStart, buttonClear, row, col) {\n  clearTable();\n  var numberAlive = getCountAliveCells();\n  handleButton(numberAlive, buttonClear);\n  handleButton(numberAlive, buttonStart);\n  storageArrayAliveSave(getAliveList(row, col));\n}\nfunction getEditField(event, table, rowField, colField, range, buttonStart, buttonClear) {\n  var element = event.target.getAttribute("id");\n\n  var _getActualTable = getActualTable(table),\n      _getActualTable2 = _slicedToArray(_getActualTable, 2),\n      rowActual = _getActualTable2[0],\n      colActual = _getActualTable2[1];\n\n  var configData = storage_getStorageConfig();\n\n  if (element === "rowField") {\n    var dataRows = Number(rowField.value);\n    aliveCell = getChangeTable(rowActual, colActual, dataRows, true);\n    getMarkupTable(aliveCell, table);\n    configData = {\n      valueRows: dataRows,\n      minRows: configData.minRows,\n      maxRows: configData.maxRows,\n      stepRows: configData.stepRows,\n      valueCols: configData.valueCols,\n      minCols: configData.minCols,\n      maxCols: configData.maxCols,\n      stepCols: configData.stepCols,\n      valueRange: configData.valueRange,\n      minRange: configData.minRange,\n      maxRange: configData.maxRange,\n      stepRange: configData.stepRange,\n      interval: configData.interval\n    };\n  } else if (element === "colField") {\n    var dataCols = Number(colField.value);\n    aliveCell = getChangeTable(rowActual, colActual, dataCols, false);\n    getMarkupTable(aliveCell, table);\n    configData = {\n      valueRows: configData.valueRows,\n      minRows: configData.minRows,\n      maxRows: configData.maxRows,\n      stepRows: configData.stepRows,\n      valueCols: dataCols,\n      minCols: configData.minCols,\n      maxCols: configData.maxCols,\n      stepCols: configData.stepCols,\n      valueRange: configData.valueRange,\n      minRange: configData.minRange,\n      maxRange: configData.maxRange,\n      stepRange: configData.stepRange,\n      interval: configData.interval\n    };\n  } else {\n    var intervalData = Number(range.value);\n    var intervalValue = getInterval(intervalData);\n    configData = {\n      valueRows: configData.valueRows,\n      minRows: configData.minRows,\n      maxRows: configData.maxRows,\n      stepRows: configData.stepRows,\n      valueCols: configData.valueCols,\n      minCols: configData.minCols,\n      maxCols: configData.maxCols,\n      stepCols: configData.stepCols,\n      valueRange: intervalData,\n      minRange: configData.minRange,\n      maxRange: configData.maxRange,\n      stepRange: configData.stepRange,\n      interval: intervalValue\n    };\n  }\n\n  storageConfig(configData);\n  var numberAlive = getCountAliveCells();\n\n  if (numberAlive <= 0 && !buttonClear.disabled && !buttonStart.disabled) {\n    handleButton(numberAlive, buttonClear);\n    handleButton(numberAlive, buttonStart);\n  }\n}\nfunction createStorage() {\n  var configDataActual = storage_getStorageConfig();\n\n  if (configDataActual === null) {\n    var configDt = {\n      valueRows: ts_config.valueRows,\n      minRows: ts_config.minRows,\n      maxRows: ts_config.maxRows,\n      stepRows: ts_config.stepRows,\n      valueCols: ts_config.valueCols,\n      minCols: ts_config.minCols,\n      maxCols: ts_config.maxCols,\n      stepCols: ts_config.stepCols,\n      valueRange: ts_config.valueRange,\n      minRange: ts_config.minRange,\n      maxRange: ts_config.maxRange,\n      stepRange: ts_config.stepRange,\n      interval: ts_config.interval\n    };\n    storageConfig(configDt);\n  }\n\n  var aliveStorage = getStorageArrayAlive();\n\n  if (aliveStorage === null) {\n    storageArrayAliveSave(getAliveList(ts_config.valueRows, ts_config.valueCols));\n    aliveStorage = getStorageArrayAlive();\n  }\n\n  if (aliveStorage !== null) {\n    var rows = Number(aliveStorage.length);\n    var cols = Number(aliveStorage[0].length);\n\n    if (rows !== Number(configDataActual.valueRows) || cols !== Number(configDataActual.valueCols)) {\n      localStorage.removeItem(\'arrayAlive\');\n      var arrayAlive = getAliveList(configDataActual.valueRows, configDataActual.valueCols);\n      storageArrayAliveSave(arrayAlive);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/ts/errorMessage.ts\nfunction errorMessage(message) {\n  var body = document.getElementsByTagName("body")[0];\n  var messageIdNotFound = document.createElement("div");\n  body.appendChild(messageIdNotFound).setAttribute("class", "Error");\n  messageIdNotFound.setAttribute("id", "Error");\n  messageIdNotFound.innerHTML = message;\n}\n;// CONCATENATED MODULE: ./src/ts/markup.ts\n\n\n\n\n\nfunction markup(elem) {\n  var configData = storage_getStorageConfig();\n  var wrapper = document.createElement("div");\n  elem.appendChild(wrapper).setAttribute("class", "wrapper");\n  var content = document.querySelector(".wrapper");\n  var header = document.createElement("header");\n  content.appendChild(header).setAttribute("class", "header");\n  var title = document.createElement("h1");\n  header.appendChild(title).setAttribute("class", "title");\n  title.innerHTML = "Game of Life";\n  var main = document.createElement("main");\n  content.appendChild(main).setAttribute("class", "main");\n  var footer = document.createElement("footer");\n  elem.appendChild(footer).setAttribute("class", "footer");\n  var form = document.createElement("div");\n  main.appendChild(form).setAttribute("class", "form");\n  form.setAttribute("id", "form"); // Row input\n\n  var formItemRows = document.createElement("div");\n  form.appendChild(formItemRows).setAttribute("class", "form-item");\n  var rowsField = document.createElement("input");\n  formItemRows.appendChild(rowsField).setAttribute("id", "rowField");\n  rowsField.setAttribute("class", "input");\n  rowsField.setAttribute("type", "number");\n  var rowsLabel = document.createElement("label");\n  formItemRows.appendChild(rowsLabel).setAttribute("for", "rowField");\n  rowsLabel.setAttribute("class", "label");\n  rowsLabel.innerHTML = "Rows";\n  formItemRows.appendChild(rowsField).setAttribute("name", "rowField");\n  rowsField.setAttribute("value", String(configData.valueRows));\n  rowsField.setAttribute("min", String(configData.minRows));\n  rowsField.setAttribute("max", String(configData.maxRows));\n  rowsField.setAttribute("step", String(configData.stepRows));\n  rowsField.setAttribute("oninput", "replacer(this)"); // Col input\n\n  var formItemCols = document.createElement("div");\n  form.appendChild(formItemCols).setAttribute("class", "form-item");\n  var colField = document.createElement("input");\n  formItemCols.appendChild(colField).setAttribute("id", "colField");\n  colField.setAttribute("class", "input");\n  colField.setAttribute("type", "number");\n  var colsLabel = document.createElement("label");\n  formItemCols.appendChild(colsLabel).setAttribute("for", "colField");\n  colsLabel.setAttribute("class", "label");\n  colsLabel.innerHTML = "Cols";\n  formItemCols.appendChild(colField).setAttribute("name", "colField");\n  colField.setAttribute("value", String(configData.valueCols));\n  colField.setAttribute("min", String(configData.minCols));\n  colField.setAttribute("max", String(configData.maxCols));\n  colField.setAttribute("step", String(configData.stepCols));\n  colField.setAttribute("oninput", "replacer(this)"); // Range input\n\n  var formItemRange = document.createElement("div");\n  form.appendChild(formItemRange).setAttribute("class", "form-item");\n  var rangeField = document.createElement("input");\n  formItemRange.appendChild(rangeField).setAttribute("id", "range");\n  rangeField.setAttribute("class", "range");\n  rangeField.setAttribute("type", "range");\n  var rangeLabel = document.createElement("label");\n  formItemRange.appendChild(rangeLabel).setAttribute("for", "range");\n  rangeLabel.setAttribute("class", "label");\n  rangeLabel.innerHTML = "Speed";\n  formItemRange.appendChild(rangeField).setAttribute("name", "tickmarks");\n  rangeField.setAttribute("value", String(configData.valueRange));\n  rangeField.setAttribute("min", String(configData.minRange));\n  rangeField.setAttribute("max", String(configData.maxRange));\n  rangeField.setAttribute("step", String(configData.stepRange));\n  formItemRange.appendChild(rangeField).setAttribute("list", "tickmarks");\n  var datalist = document.createElement("datalist");\n  formItemRange.appendChild(datalist).setAttribute("id", "tickmarks");\n\n  for (var j = configData.minRange; j <= configData.maxRange; j += configData.stepRange) {\n    var option = document.createElement("option");\n    datalist.appendChild(option).setAttribute("value", String(j));\n    option.setAttribute("label", String(j));\n    var intervalValue = getInterval(j);\n\n    if (intervalValue === configData.interval) {\n      option.setAttribute("selected", "selected");\n    }\n\n    option.innerHTML = String(j);\n  }\n\n  if (configData.valueRows > 2 || configData.valueCols > 2) {\n    var table = document.createElement("table");\n    main.appendChild(table).setAttribute("class", "table");\n    table.setAttribute("id", "table");\n    table.setAttribute("border", "0");\n    table.setAttribute("cellpadding", "0");\n    table.setAttribute("cellspacing", "0");\n    var aliveList = getAliveList(configData.valueRows, configData.valueCols);\n    getMarkupTable(aliveList, table);\n  } else {\n    errorMessage("Error: small input values");\n  }\n\n  var control = document.createElement("div");\n  main.appendChild(control).setAttribute("class", "control");\n  control.setAttribute("id", "control"); // Button start\n\n  var buttonStart = document.createElement("button");\n  control.appendChild(buttonStart).setAttribute("type", "button");\n  buttonStart.setAttribute("id", "buttonStart");\n  buttonStart.setAttribute("class", "button");\n  buttonStart.setAttribute("disabled", "disabled");\n  buttonStart.innerHTML = "Start"; // Button stop\n\n  var buttonStop = document.createElement("button");\n  control.appendChild(buttonStop).setAttribute("type", "button");\n  buttonStop.setAttribute("id", "buttonStop");\n  buttonStop.setAttribute("class", "button");\n  buttonStop.setAttribute("disabled", "disabled");\n  buttonStop.innerHTML = "Stop"; // Button clear\n\n  var buttonClear = document.createElement("button");\n  control.appendChild(buttonClear).setAttribute("type", "button");\n  buttonClear.setAttribute("id", "buttonClear");\n  buttonClear.setAttribute("class", "button");\n  buttonClear.setAttribute("disabled", "disabled");\n  buttonClear.innerHTML = "Clear";\n}\n\n/* harmony default export */ const ts_markup = (markup);\n;// CONCATENATED MODULE: ./src/ts/handlers.ts\n\n\n\nvar configData = storage_getStorageConfig();\nfunction App() {\n  var row = configData.valueRows;\n  var col = configData.valueCols;\n  storageArrayAliveSave(getAliveList(row, col));\n  var table = document.getElementById("table");\n  var form = document.getElementById("form");\n  var rowField = document.getElementById("rowField");\n  var colField = document.getElementById("colField");\n  var buttonStart = document.getElementById("buttonStart");\n  var buttonStop = document.getElementById("buttonStop");\n  var buttonClear = document.getElementById("buttonClear");\n  var rangeField = document.getElementById("range");\n  table.addEventListener("click", function (event) {\n    return handlerTableClick(event, buttonStart, buttonClear);\n  });\n  buttonStart.addEventListener("click", function () {\n    return getStart(table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField);\n  });\n  buttonStop.addEventListener("click", function () {\n    return getStop(buttonStop, buttonStart, buttonClear, rowField, colField);\n  });\n  buttonClear.addEventListener("click", function () {\n    return getClear(buttonStart, buttonClear, row, col);\n  });\n  form.addEventListener("change", function (event) {\n    return getEditField(event, table, rowField, colField, rangeField, buttonStart, buttonClear);\n  });\n}\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\nfunction startApp() {\n  var app = document.getElementById("app");\n  createStorage();\n  ts_markup(app);\n  App();\n}\ndocument.addEventListener("DOMContentLoaded", startApp);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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USxDQUNObkYsS0FETSxFQUVOMkUsVUFGTSxFQUdOQyxVQUhNLEVBSU5MLFdBSk0sRUFLTkMsV0FMTSxFQU1OZCxRQU5NLEVBT05NLFFBUE0sQ0FENEI7QUFBQSxHQUF0QztBQVlBWSxFQUFBQSxVQUFVLENBQUNxRCxnQkFBWCxDQUE0QixPQUE1QixFQUFxQztBQUFBLFdBQ25DN0MsT0FBTyxDQUFDUixVQUFELEVBQWFMLFdBQWIsRUFBMEJDLFdBQTFCLEVBQXVDZCxRQUF2QyxFQUFpRE0sUUFBakQsQ0FENEI7QUFBQSxHQUFyQztBQUlBUSxFQUFBQSxXQUFXLENBQUN5RCxnQkFBWixDQUE2QixPQUE3QixFQUFzQztBQUFBLFdBQ3BDNUMsUUFBUSxDQUFDZCxXQUFELEVBQWNDLFdBQWQsRUFBMkIvRixHQUEzQixFQUFnQ0MsR0FBaEMsQ0FENEI7QUFBQSxHQUF0QztBQUlBMEksRUFBQUEsSUFBSSxDQUFDYSxnQkFBTCxDQUFzQixRQUF0QixFQUFnQyxVQUFDbEgsS0FBRDtBQUFBLFdBQzlCdUUsWUFBWSxDQUNWdkUsS0FEVSxFQUVWZixLQUZVLEVBR1YwRCxRQUhVLEVBSVZNLFFBSlUsRUFLVlcsVUFMVSxFQU1WSixXQU5VLEVBT1ZDLFdBUFUsQ0FEa0I7QUFBQSxHQUFoQztBQVdELEM7O0FDcEVEO0FBQ0E7QUFDQTtBQUNBO0FBRU8sU0FBUzBELFFBQVQsR0FBb0I7QUFDekIsTUFBTUMsR0FBRyxHQUFHN0gsUUFBUSxDQUFDcUQsY0FBVCxDQUF3QixLQUF4QixDQUFaO0FBQ0FxQyxFQUFBQSxhQUFhO0FBQ2JZLEVBQUFBLFNBQU0sQ0FBQ3VCLEdBQUQsQ0FBTjtBQUNBSCxFQUFBQSxHQUFHO0FBQ0o7QUFFRDFILFFBQVEsQ0FBQzJILGdCQUFULENBQTBCLGtCQUExQixFQUE4Q0MsUUFBOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanM/NjFmMCIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanM/YTY4YiIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcz8yYzhmIiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcz85NGFiIiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanM/YjViNCIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcz84OTljIiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL3NyYy90cy9jb25maWcudHM/YmI3NiIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9zcmMvdHMvc3RvcmFnZS50cz80Mzk3Iiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL3NyYy90cy9leHRyYUZ1bmN0aW9ucy50cz9kNmU3Iiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcz8yYzIyIiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanM/NThjZCIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanM/YTYzYiIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanM/YTc1ZCIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9zcmMvdHMvY29udHJvbC50cz83MTk4Iiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL3NyYy90cy9tYWluLnRzPzY0ZjQiLCJ3ZWJwYWNrOi8vb3R1cy1ob21ld29yay05Ly4vc3JjL3RzL2Vycm9yTWVzc2FnZS50cz9kNzlkIiwid2VicGFjazovL290dXMtaG9tZXdvcmstOS8uL3NyYy90cy9tYXJrdXAudHM/YzlhMCIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9zcmMvdHMvaGFuZGxlcnMudHM/MmY2MiIsIndlYnBhY2s6Ly9vdHVzLWhvbWV3b3JrLTkvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG5cbiAgdmFyIF9zLCBfZTtcblxuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiLy8gc2V0dGluZ3NcblxuY29uc3QgY29uZmlnID0ge1xuICB2YWx1ZVJvd3M6IDUsXG4gIG1pblJvd3M6IDMsXG4gIG1heFJvd3M6IDIwLFxuICBzdGVwUm93czogMSxcbiAgdmFsdWVDb2xzOiA1LFxuICBtaW5Db2xzOiAzLFxuICBtYXhDb2xzOiAyMCxcbiAgc3RlcENvbHM6IDEsXG4gIHZhbHVlUmFuZ2U6IDMsXG4gIG1pblJhbmdlOiAxLFxuICBtYXhSYW5nZTogNSxcbiAgc3RlcFJhbmdlOiAxLFxuICBpbnRlcnZhbDogMTAwMCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiIsImltcG9ydCBjb25maWcgZnJvbSBcIi4vY29uZmlnXCI7XG5cbnR5cGUgVENvbmZpZyA9IHtcbiAgdmFsdWVSb3dzOiBudW1iZXIsXG4gIG1pblJvd3M6IG51bWJlcixcbiAgbWF4Um93czogbnVtYmVyLFxuICBzdGVwUm93czogbnVtYmVyLFxuICB2YWx1ZUNvbHM6IG51bWJlcixcbiAgbWluQ29sczogbnVtYmVyLFxuICBtYXhDb2xzOiBudW1iZXIsXG4gIHN0ZXBDb2xzOiBudW1iZXIsXG4gIHZhbHVlUmFuZ2U6IG51bWJlcixcbiAgbWluUmFuZ2U6IG51bWJlcixcbiAgbWF4UmFuZ2U6IG51bWJlcixcbiAgc3RlcFJhbmdlOiBudW1iZXIsXG4gIGludGVydmFsOiBudW1iZXJcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2VBcnJheUFsaXZlU2F2ZShhcnJheUFsaXZlOiBudW1iZXJbXVtdKTogdm9pZCB7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiYXJyYXlBbGl2ZVwiLCBKU09OLnN0cmluZ2lmeShhcnJheUFsaXZlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdG9yYWdlQXJyYXlBbGl2ZSgpOiBudW1iZXJbXVtdIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJhcnJheUFsaXZlXCIpIGFzIHN0cmluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9yYWdlQ29uZmlnKGNvbmZpZ0RhdGE6IFRDb25maWcpOiB2b2lkIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjb25maWdcIiwgSlNPTi5zdHJpbmdpZnkoY29uZmlnRGF0YSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RvcmFnZUNvbmZpZygpOiBUQ29uZmlnICB7XG4gIGxldCBjb25maWdEYXRhOiBUQ29uZmlnID1cbiAgICBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY29uZmlnXCIpIGFzIHN0cmluZyk7XG4gICAgXG4gIGlmKGNvbmZpZ0RhdGEgPT09IG51bGwpIHtcbiAgICBjb25maWdEYXRhID0ge1xuICAgICAgdmFsdWVSb3dzOiBjb25maWcudmFsdWVSb3dzLFxuICAgICAgbWluUm93czogY29uZmlnLm1pblJvd3MsXG4gICAgICBtYXhSb3dzOiBjb25maWcubWF4Um93cyxcbiAgICAgIHN0ZXBSb3dzOiBjb25maWcuc3RlcFJvd3MsXG4gICAgICB2YWx1ZUNvbHM6IGNvbmZpZy52YWx1ZUNvbHMsXG4gICAgICBtaW5Db2xzOiBjb25maWcubWluQ29scyxcbiAgICAgIG1heENvbHM6IGNvbmZpZy5tYXhDb2xzLFxuICAgICAgc3RlcENvbHM6IGNvbmZpZy5zdGVwQ29scyxcbiAgICAgIHZhbHVlUmFuZ2U6IGNvbmZpZy52YWx1ZVJhbmdlLFxuICAgICAgbWluUmFuZ2U6IGNvbmZpZy5taW5SYW5nZSxcbiAgICAgIG1heFJhbmdlOiBjb25maWcubWF4UmFuZ2UsXG4gICAgICBzdGVwUmFuZ2U6IGNvbmZpZy5zdGVwUmFuZ2UsXG4gICAgICBpbnRlcnZhbDogY29uZmlnLmludGVydmFsXG4gICAgfTtcbiAgICBcbiAgICBzdG9yYWdlQ29uZmlnKGNvbmZpZ0RhdGEpO1xuICB9XG4gIHJldHVybiBjb25maWdEYXRhO1xufSIsImltcG9ydCB7XG4gIGdldFN0b3JhZ2VBcnJheUFsaXZlLFxuICBnZXRTdG9yYWdlQ29uZmlnXG59IGZyb20gXCIuL3N0b3JhZ2VcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsaXZlTGlzdChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBudW1iZXJbXVtdIHtcbiAgY29uc3QgYWxpdmVMaXN0RW1wdHk6IG51bWJlcltdW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3c7IGkgKz0gMSkge1xuICAgIGFsaXZlTGlzdEVtcHR5W2ldID0gW107XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2w7IGogKz0gMSkge1xuICAgICAgYWxpdmVMaXN0RW1wdHlbaV1bal0gPSAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYWxpdmVMaXN0RW1wdHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3VudGVyQXJvdW5kQ2VsbChcbiAgcm93Q3VyZW50OiBudW1iZXIsXG4gIGNvbEN1cmVudDogbnVtYmVyXG4pOiBudW1iZXIge1xuICBjb25zdCBhbGl2ZUNlbGwgPSBnZXRTdG9yYWdlQXJyYXlBbGl2ZSgpO1xuICBjb25zdCBjb25maWdEYXRhID0gZ2V0U3RvcmFnZUNvbmZpZygpO1xuXG4gIGxldCBzdW0gPSAwO1xuICBsZXQgcm93U3RhcnQ6IG51bWJlcjtcbiAgbGV0IHJvd0ZpbmlzaDogbnVtYmVyO1xuICBsZXQgY29sU3RhcnQ6IG51bWJlcjtcbiAgbGV0IGNvbEZpbmlzaDogbnVtYmVyO1xuXG4gIGlmIChyb3dDdXJlbnQgLSAxIDwgMCkge1xuICAgIHJvd1N0YXJ0ID0gMDtcbiAgfSBlbHNlIHtcbiAgICByb3dTdGFydCA9IHJvd0N1cmVudCAtIDE7XG4gIH1cblxuICBpZiAocm93Q3VyZW50ICsgMSA+PSBjb25maWdEYXRhLnZhbHVlUm93cykge1xuICAgIHJvd0ZpbmlzaCA9IHJvd0N1cmVudDtcbiAgfSBlbHNlIHtcbiAgICByb3dGaW5pc2ggPSByb3dDdXJlbnQgKyAxO1xuICB9XG5cbiAgaWYgKGNvbEN1cmVudCAtIDEgPCAwKSB7XG4gICAgY29sU3RhcnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGNvbFN0YXJ0ID0gY29sQ3VyZW50IC0gMTtcbiAgfVxuXG4gIGlmIChjb2xDdXJlbnQgKyAxID49IGNvbmZpZ0RhdGEudmFsdWVDb2xzKSB7XG4gICAgY29sRmluaXNoID0gY29sQ3VyZW50O1xuICB9IGVsc2Uge1xuICAgIGNvbEZpbmlzaCA9IGNvbEN1cmVudCArIDE7XG4gIH1cblxuICBmb3IgKGxldCBpID0gcm93U3RhcnQ7IGkgPD0gcm93RmluaXNoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gY29sU3RhcnQ7IGogPD0gY29sRmluaXNoOyBqICs9IDEpIHtcbiAgICAgIGlmIChpICE9PSByb3dDdXJlbnQgfHwgaiAhPT0gY29sQ3VyZW50KSB7XG4gICAgICAgIHN1bSArPSBOdW1iZXIoYWxpdmVDZWxsW2ldW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbmRpdGlvbkNlbGwoXG4gIGFycmF5Q291bnRlcnM6IG51bWJlcltdW10sXG4gIHJvdzogbnVtYmVyLFxuICBjb2w6IG51bWJlclxuKTogbnVtYmVyW11bXSB7XG4gIGNvbnN0IGFycmF5QWxpdmUgPSBnZXRTdG9yYWdlQXJyYXlBbGl2ZSgpO1xuICBjb25zdCBhcnJheUFsaXZlTmV3OiBudW1iZXJbXVtdID0gZ2V0QWxpdmVMaXN0KHJvdywgY29sKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3c7IGkgKz0gMSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sOyBqICs9IDEpIHtcbiAgICAgIGlmIChhcnJheUFsaXZlW2ldW2pdID09PSAxKSB7XG4gICAgICAgIGlmIChhcnJheUNvdW50ZXJzW2ldW2pdIDwgMiB8fCBhcnJheUNvdW50ZXJzW2ldW2pdID4gMykge1xuICAgICAgICAgIGFycmF5QWxpdmVOZXdbaV1bal0gPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFycmF5QWxpdmVOZXdbaV1bal0gPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFycmF5Q291bnRlcnNbaV1bal0gPT09IDMpIHtcbiAgICAgICAgYXJyYXlBbGl2ZU5ld1tpXVtqXSA9IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheUFsaXZlTmV3O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50ZXJ2YWwodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IGludGVydmFsQXJyYXkgPSBbMjUwMCwgMjAwMCwgMTUwMCwgMTAwMCwgNTAwXTtcbiAgcmV0dXJuIGludGVydmFsQXJyYXlbdmFsdWUgLSAxXTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCB7XG4gIGdldEFsaXZlTGlzdCxcbiAgY291bnRlckFyb3VuZENlbGwsXG4gIHNldENvbmRpdGlvbkNlbGwsXG59IGZyb20gXCIuL2V4dHJhRnVuY3Rpb25zXCI7XG5cbmltcG9ydCB7XG4gIHN0b3JhZ2VBcnJheUFsaXZlU2F2ZSxcbiAgZ2V0U3RvcmFnZUFycmF5QWxpdmUsXG4gIGdldFN0b3JhZ2VDb25maWdcbn0gZnJvbSBcIi4vc3RvcmFnZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFya3VwVGFibGUoXG4gIGFycmF5QWxpdmU6IG51bWJlcltdW10sXG4gIHRibDogSFRNTFRhYmxlRWxlbWVudFxuKTogdm9pZCB7XG4gIGNvbnN0IHRhYmxlID0gdGJsO1xuICB0YWJsZS5pbm5lckhUTUwgPSBcIlwiO1xuICBjb25zdCBjbGFzc2VzID0gXCJjZWxsIGNlbGxfYWxpdmVcIi5zcGxpdChcIiBcIik7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUFsaXZlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgdHI6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInJvd1wiKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFycmF5QWxpdmVbaV0ubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IHRkOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgIHRyLmFwcGVuZENoaWxkKHRkKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNlbGxcIik7XG4gICAgICB0ZC5kYXRhc2V0LnJvdyA9IGAke2l9YDtcbiAgICAgIHRkLmRhdGFzZXQuY29sID0gYCR7an1gO1xuICAgICAgaWYgKGFycmF5QWxpdmVbaV1bal0gPT09IDEpIHtcbiAgICAgICAgdGQuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvc0NsaWNrKGV2ZW50OiBFdmVudCk6IHN0cmluZ1tdIHtcbiAgY29uc3QgY2VsbCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MVGFibGVDZWxsRWxlbWVudDtcbiAgY29uc3QgY29vcmRZID0gY2VsbC5kYXRhc2V0LnJvdyBhcyBzdHJpbmc7XG4gIGNvbnN0IGNvb3JkWCA9IGNlbGwuZGF0YXNldC5jb2wgYXMgc3RyaW5nO1xuICByZXR1cm4gW2Nvb3JkWSwgY29vcmRYXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvZ2dsZUNsYXNzKGNvb3Jkczogc3RyaW5nW10pOiB2b2lkIHtcbiAgY29uc3QgY29vcmRzWSA9IE51bWJlcihjb29yZHNbMF0pO1xuICBjb25zdCBjb29yZHNYID0gTnVtYmVyKGNvb3Jkc1sxXSk7XG4gIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgIGB0ZFtkYXRhLXJvdz0nJHtjb29yZHNZfSddW2RhdGEtY29sPScke2Nvb3Jkc1h9J11gXG4gICk7XG4gIGNlbGxbMF0uY2xhc3NMaXN0LnRvZ2dsZShcImNlbGxfYWxpdmVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXdBbGl2ZUxpc3QoY29vcmROZXc6IHN0cmluZ1tdKTogbnVtYmVyW11bXSB7XG4gIGNvbnN0IGFycmF5ID0gZ2V0U3RvcmFnZUFycmF5QWxpdmUoKTtcbiAgY29uc3Qgcm93OiBudW1iZXIgPSBOdW1iZXIoY29vcmROZXdbMF0pO1xuICBjb25zdCBjb2w6IG51bWJlciA9IE51bWJlcihjb29yZE5ld1sxXSk7XG4gIGNvbnN0IGFycmF5TmV3OiBudW1iZXJbXVtdID0gYXJyYXkuc2xpY2UoKTtcblxuICBpZiAoYXJyYXlbcm93XVtjb2xdKSB7XG4gICAgYXJyYXlOZXdbcm93XVtjb2xdID0gMDtcbiAgfSBlbHNlIHtcbiAgICBhcnJheU5ld1tyb3ddW2NvbF0gPSAxO1xuICB9XG4gIHJldHVybiBhcnJheU5ldztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyVGFibGUoKTogdm9pZCB7XG4gIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YWJsZVwiKSBhcyBIVE1MVGFibGVFbGVtZW50O1xuICBjb25zdCBjZWxsc0FsaXZlID0gdGFibGUucXVlcnlTZWxlY3RvckFsbChcInRkLmNlbGxfYWxpdmVcIik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbHNBbGl2ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNlbGxzQWxpdmVbaV0uY2xhc3NMaXN0LnJlbW92ZShcImNlbGxfYWxpdmVcIik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvdW50QWxpdmVDZWxscygpOiBudW1iZXIge1xuICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFibGVcIikgYXMgSFRNTFRhYmxlRWxlbWVudDtcbiAgcmV0dXJuIHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0ZC5jZWxsX2FsaXZlXCIpLmxlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJ1dHRvbihcbiAgbnVtYmVyQWxpdmU6IG51bWJlcixcbiAgYnRuOiBIVE1MQnV0dG9uRWxlbWVudFxuKTogdm9pZCB7XG4gIGNvbnN0IGJ1dHRvbiA9IGJ0bjtcbiAgaWYgKG51bWJlckFsaXZlIDw9IDApIHtcbiAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVJbnB1dChcbiAgaXNEaXNhYmxlZDogYm9vbGVhbixcbiAgaW50OiBIVE1MSW5wdXRFbGVtZW50XG4pOiB2b2lkIHtcbiAgY29uc3QgaW5wdXQgPSBpbnQ7XG4gIGlmIChpc0Rpc2FibGVkKSB7XG4gICAgaW5wdXQuZGlzYWJsZWQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGlucHV0LmRpc2FibGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVwZGF0ZUFycmF5KHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IG51bWJlcltdW10ge1xuICBjb25zdCBjb3VudGVyQWxpdmVBcm91bmQ6IG51bWJlcltdW10gPSBnZXRBbGl2ZUxpc3Qocm93LCBjb2wpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdzsgaSArPSAxKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2w7IGogKz0gMSkge1xuICAgICAgY291bnRlckFsaXZlQXJvdW5kW2ldW2pdID0gY291bnRlckFyb3VuZENlbGwoaSwgaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXRDb25kaXRpb25DZWxsKGNvdW50ZXJBbGl2ZUFyb3VuZCwgcm93LCBjb2wpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXBkYXRlVGFibGUocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogdm9pZCB7XG4gIGNvbnN0IGFycmF5QWxpdmUgPSBnZXRTdG9yYWdlQXJyYXlBbGl2ZSgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdzsgaSArPSAxKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2w7IGogKz0gMSkge1xuICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgIGB0ZFtkYXRhLXJvdz0nJHtpfSddW2RhdGEtY29sPScke2p9J11gXG4gICAgICApO1xuICAgICAgY2VsbFswXS5jbGFzc0xpc3QucmVtb3ZlKFwiY2VsbF9hbGl2ZVwiKTtcbiAgICAgIGlmIChhcnJheUFsaXZlW2ldW2pdID09PSAxKSB7XG4gICAgICAgIGNlbGxbMF0uY2xhc3NMaXN0LmFkZChcImNlbGxfYWxpdmVcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0VxdWFsQXJyKGFycmF5MTogbnVtYmVyW11bXSwgYXJyYXkyOiBudW1iZXJbXVtdKTogYm9vbGVhbiB7XG4gIHJldHVybiBhcnJheTEuZXZlcnkoKHZhbHVlMSwgaSkgPT5cbiAgICBhcnJheTFbaV0uZXZlcnkoKHZhbHVlMiwgaikgPT4gdmFsdWUyID09PSBhcnJheTJbaV1bal0pXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGFuZ2VUYWJsZShcbiAgcm93OiBudW1iZXIsXG4gIGNvbDogbnVtYmVyLFxuICBuZXdWYWx1ZTogbnVtYmVyLFxuICBpc1JvdzogYm9vbGVhblxuKTogbnVtYmVyW11bXSB7XG4gIGxldCBuZXdWYWx1ZU51bSA9IG5ld1ZhbHVlO1xuICBjb25zdCBhcnJheUFsaXZlID0gZ2V0U3RvcmFnZUFycmF5QWxpdmUoKTtcbiAgY29uc3QgY29uZmlnRGF0YSA9IGdldFN0b3JhZ2VDb25maWcoKTtcbiAgaWYgKGlzUm93KSB7XG4gICAgY29uc3Qgcm93RmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvd0ZpZWxkXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgaWYgKHJvdyA+PSBuZXdWYWx1ZU51bSkge1xuICAgICAgaWYgKG5ld1ZhbHVlTnVtIDwgY29uZmlnRGF0YS5taW5Sb3dzKSB7XG4gICAgICAgIG5ld1ZhbHVlTnVtID0gY29uZmlnRGF0YS5taW5Sb3dzO1xuICAgICAgICByb3dGaWVsZC52YWx1ZSA9IFN0cmluZyhuZXdWYWx1ZU51bSk7XG4gICAgICB9XG4gICAgICBjb25zdCBkZWxDZWxsID0gcm93IC0gbmV3VmFsdWVOdW07XG4gICAgICBhcnJheUFsaXZlLnNwbGljZShhcnJheUFsaXZlLmxlbmd0aCAtIGRlbENlbGwsIGRlbENlbGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmV3VmFsdWVOdW0gPiBjb25maWdEYXRhLm1heFJvd3MpIHtcbiAgICAgICAgbmV3VmFsdWVOdW0gPSBjb25maWdEYXRhLm1heFJvd3M7XG4gICAgICAgIHJvd0ZpZWxkLnZhbHVlID0gU3RyaW5nKG5ld1ZhbHVlTnVtKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGogPSByb3c7IGogPCBuZXdWYWx1ZU51bTsgaiArPSAxKSB7XG4gICAgICAgIGFycmF5QWxpdmUucHVzaChbXSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJheUFsaXZlW2pdLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29sRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbEZpZWxkXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3c7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbCA+PSBuZXdWYWx1ZU51bSkge1xuICAgICAgICBpZiAobmV3VmFsdWVOdW0gPCBjb25maWdEYXRhLm1pbkNvbHMpIHtcbiAgICAgICAgICBuZXdWYWx1ZU51bSA9IGNvbmZpZ0RhdGEubWluQ29scztcbiAgICAgICAgICBjb2xGaWVsZC52YWx1ZSA9IFN0cmluZyhuZXdWYWx1ZU51bSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVsQ2VsbCA9IGNvbCAtIG5ld1ZhbHVlTnVtO1xuICAgICAgICBhcnJheUFsaXZlW2ldLnNwbGljZShhcnJheUFsaXZlW2ldLmxlbmd0aCAtIGRlbENlbGwsIGRlbENlbGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5ld1ZhbHVlTnVtID4gY29uZmlnRGF0YS5tYXhDb2xzKSB7XG4gICAgICAgICAgbmV3VmFsdWVOdW0gPSBjb25maWdEYXRhLm1heENvbHM7XG4gICAgICAgICAgY29sRmllbGQudmFsdWUgPSBTdHJpbmcobmV3VmFsdWVOdW0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSBjb2w7IGogPCBuZXdWYWx1ZU51bTsgaiArPSAxKSB7XG4gICAgICAgICAgYXJyYXlBbGl2ZVtpXS5wdXNoKDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN0b3JhZ2VBcnJheUFsaXZlU2F2ZShhcnJheUFsaXZlKTtcbiAgcmV0dXJuIGFycmF5QWxpdmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3R1YWxUYWJsZSh0YWJsZTogSFRNTFRhYmxlRWxlbWVudCk6IG51bWJlcltdIHtcbiAgY29uc3QgbnVtUm93czogbnVtYmVyID0gdGFibGUucXVlcnlTZWxlY3RvckFsbChcInRyXCIpLmxlbmd0aDtcbiAgY29uc3QgYXJyUm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0clwiKTtcbiAgY29uc3QgbnVtQ29sczogbnVtYmVyID0gYXJyUm93c1swXS5xdWVyeVNlbGVjdG9yQWxsKFwidGRcIikubGVuZ3RoO1xuICByZXR1cm4gW051bWJlcihudW1Sb3dzKSwgTnVtYmVyKG51bUNvbHMpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEludGVydmFsKCk6IG51bWJlciB7XG4gIGNvbnN0IGNvbmZpZ0RhdGEgPSBnZXRTdG9yYWdlQ29uZmlnKCk7XG4gIHJldHVybiBjb25maWdEYXRhLmludGVydmFsO1xufVxuIiwiaW1wb3J0IGNvbmZpZyBmcm9tIFwiLi9jb25maWdcIjtcblxuaW1wb3J0IHtcbiAgZ2V0QWxpdmVMaXN0LFxuICBnZXRJbnRlcnZhbFxufSBmcm9tIFwiLi9leHRyYUZ1bmN0aW9uc1wiO1xuXG5pbXBvcnQge1xuICBnZXRNYXJrdXBUYWJsZSxcbiAgZ2V0Q291bnRBbGl2ZUNlbGxzLFxuICBoYW5kbGVCdXR0b24sXG4gIGhhbmRsZUlucHV0LFxuICBnZXRQb3NDbGljayxcbiAgZ2V0TmV3QWxpdmVMaXN0LFxuICBnZXRUb2dnbGVDbGFzcyxcbiAgY2xlYXJUYWJsZSxcbiAgZ2V0VXBkYXRlQXJyYXksXG4gIGdldFVwZGF0ZVRhYmxlLFxuICB0b0VxdWFsQXJyLFxuICBnZXRDaGFuZ2VUYWJsZSxcbiAgZ2V0QWN0dWFsVGFibGVcbn0gZnJvbSBcIi4vY29udHJvbFwiO1xuXG5pbXBvcnQge1xuICBzdG9yYWdlQXJyYXlBbGl2ZVNhdmUsXG4gIGdldFN0b3JhZ2VBcnJheUFsaXZlLFxuICBzdG9yYWdlQ29uZmlnLFxuICBnZXRTdG9yYWdlQ29uZmlnLFxufSBmcm9tIFwiLi9zdG9yYWdlXCI7XG5cbmxldCB0aW1lcklkOiBudW1iZXI7XG5sZXQgYWxpdmVDZWxsOiBudW1iZXJbXVtdID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVyVGFibGVDbGljayhcbiAgZXZlbnQ6IEV2ZW50LFxuICBidXR0b25TdGFydDogSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIGJ1dHRvbkNsZWFyOiBIVE1MQnV0dG9uRWxlbWVudFxuKTogdm9pZCB7XG4gIGNvbnN0IGNvb3Jkczogc3RyaW5nW10gPSBnZXRQb3NDbGljayhldmVudCk7XG4gIGdldFRvZ2dsZUNsYXNzKGNvb3Jkcyk7XG4gIGNvbnN0IG51bWJlckFsaXZlID0gZ2V0Q291bnRBbGl2ZUNlbGxzKCk7XG4gIGhhbmRsZUJ1dHRvbihudW1iZXJBbGl2ZSwgYnV0dG9uQ2xlYXIpO1xuICBoYW5kbGVCdXR0b24obnVtYmVyQWxpdmUsIGJ1dHRvblN0YXJ0KTtcbiAgY29uc3QgYWxpdmVMaXN0TmV3ID0gZ2V0TmV3QWxpdmVMaXN0KGNvb3Jkcyk7XG4gIHN0b3JhZ2VBcnJheUFsaXZlU2F2ZShhbGl2ZUxpc3ROZXcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGljayhcbiAgdGFibGU6IEhUTUxUYWJsZUVsZW1lbnQsXG4gIHJhbmdlRmllbGQ6IEhUTUxJbnB1dEVsZW1lbnQsXG4gIGJ1dHRvblN0b3A6IEhUTUxCdXR0b25FbGVtZW50LFxuICBidXR0b25TdGFydDogSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIGJ1dHRvbkNsZWFyOiBIVE1MQnV0dG9uRWxlbWVudCxcbiAgcm93RmllbGQ6IEhUTUxJbnB1dEVsZW1lbnQsXG4gIGNvbEZpZWxkOiBIVE1MSW5wdXRFbGVtZW50XG4pOiB2b2lkIHtcbiAgY29uc3QgYXJyID0gZ2V0U3RvcmFnZUFycmF5QWxpdmUoKTtcbiAgY29uc3QgY29uZmlnRGF0YSA9IGdldFN0b3JhZ2VDb25maWcoKTtcbiAgY29uc3QgdGltZUludGVydmFsID0gY29uZmlnRGF0YS5pbnRlcnZhbDtcbiAgY29uc3Qgcm93ID0gY29uZmlnRGF0YS52YWx1ZVJvd3M7XG4gIGNvbnN0IGNvbCA9IGNvbmZpZ0RhdGEudmFsdWVDb2xzO1xuXG4gIGFsaXZlQ2VsbCA9IGdldFVwZGF0ZUFycmF5KHJvdywgY29sKTtcbiAgZ2V0VXBkYXRlVGFibGUocm93LCBjb2wpO1xuICBzdG9yYWdlQXJyYXlBbGl2ZVNhdmUoYWxpdmVDZWxsKTtcbiAgY29uc3QgZXF1YWxBcnI6IGJvb2xlYW4gPSB0b0VxdWFsQXJyKGFyciwgYWxpdmVDZWxsKTtcbiAgaWYgKGdldENvdW50QWxpdmVDZWxscygpIDw9IDApIHtcbiAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgZ2V0QWxpdmVMaXN0KHJvdywgY29sKTtcbiAgICBoYW5kbGVCdXR0b24oMCwgYnV0dG9uU3RvcCk7XG4gICAgaGFuZGxlSW5wdXQoZmFsc2UsIHJvd0ZpZWxkKTtcbiAgICBoYW5kbGVJbnB1dChmYWxzZSwgY29sRmllbGQpO1xuICB9IGVsc2UgaWYgKGVxdWFsQXJyKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIGdldEFsaXZlTGlzdChyb3csIGNvbCk7XG4gICAgaGFuZGxlQnV0dG9uKDAsIGJ1dHRvblN0b3ApO1xuICAgIGhhbmRsZUJ1dHRvbigxLCBidXR0b25TdGFydCk7XG4gICAgaGFuZGxlQnV0dG9uKDEsIGJ1dHRvbkNsZWFyKTtcbiAgICBoYW5kbGVJbnB1dChmYWxzZSwgcm93RmllbGQpO1xuICAgIGhhbmRsZUlucHV0KGZhbHNlLCBjb2xGaWVsZCk7XG4gIH0gZWxzZSB7XG4gICAgdGltZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgdGljayxcbiAgICAgIHRpbWVJbnRlcnZhbCxcbiAgICAgIHRhYmxlLFxuICAgICAgcmFuZ2VGaWVsZCxcbiAgICAgIGJ1dHRvblN0b3AsXG4gICAgICBidXR0b25TdGFydCxcbiAgICAgIGJ1dHRvbkNsZWFyLFxuICAgICAgcm93RmllbGQsXG4gICAgICBjb2xGaWVsZFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXJ0KFxuICB0YWJsZTogSFRNTFRhYmxlRWxlbWVudCxcbiAgcmFuZ2VGaWVsZDogSFRNTElucHV0RWxlbWVudCxcbiAgYnV0dG9uU3RvcDogSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIGJ1dHRvblN0YXJ0OiBIVE1MQnV0dG9uRWxlbWVudCxcbiAgYnV0dG9uQ2xlYXI6IEhUTUxCdXR0b25FbGVtZW50LFxuICByb3dGaWVsZDogSFRNTElucHV0RWxlbWVudCxcbiAgY29sRmllbGQ6IEhUTUxJbnB1dEVsZW1lbnRcbik6IHZvaWQge1xuICBjb25zdCBjb25maWdEYXRhID0gZ2V0U3RvcmFnZUNvbmZpZygpO1xuICBjb25zdCBpbnRlcnZhbCA9IGNvbmZpZ0RhdGEudmFsdWVSYW5nZTtcbiAgY29uc3QgbnVtYmVyQWxpdmU6IG51bWJlciA9IGdldENvdW50QWxpdmVDZWxscygpO1xuICBoYW5kbGVCdXR0b24obnVtYmVyQWxpdmUsIGJ1dHRvblN0b3ApO1xuICBoYW5kbGVCdXR0b24oMCwgYnV0dG9uQ2xlYXIpO1xuICBoYW5kbGVCdXR0b24oMCwgYnV0dG9uU3RhcnQpO1xuICBoYW5kbGVJbnB1dCh0cnVlLCByb3dGaWVsZCk7XG4gIGhhbmRsZUlucHV0KHRydWUsIGNvbEZpZWxkKTtcbiAgc2V0VGltZW91dChcbiAgICB0aWNrLFxuICAgIGludGVydmFsLFxuICAgIHRhYmxlLFxuICAgIHJhbmdlRmllbGQsXG4gICAgYnV0dG9uU3RvcCxcbiAgICBidXR0b25TdGFydCxcbiAgICBidXR0b25DbGVhcixcbiAgICByb3dGaWVsZCxcbiAgICBjb2xGaWVsZFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RvcChcbiAgYnV0dG9uU3RvcDogSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIGJ1dHRvblN0YXJ0OiBIVE1MQnV0dG9uRWxlbWVudCxcbiAgYnV0dG9uQ2xlYXI6IEhUTUxCdXR0b25FbGVtZW50LFxuICByb3dGaWVsZDogSFRNTElucHV0RWxlbWVudCxcbiAgY29sRmllbGQ6IEhUTUxJbnB1dEVsZW1lbnRcbik6IHZvaWQge1xuICBjb25zdCBudW1iZXJBbGl2ZTogbnVtYmVyID0gZ2V0Q291bnRBbGl2ZUNlbGxzKCk7XG4gIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgaGFuZGxlQnV0dG9uKDAsIGJ1dHRvblN0b3ApO1xuICBoYW5kbGVCdXR0b24obnVtYmVyQWxpdmUsIGJ1dHRvbkNsZWFyKTtcbiAgaGFuZGxlQnV0dG9uKG51bWJlckFsaXZlLCBidXR0b25TdGFydCk7XG4gIGhhbmRsZUlucHV0KGZhbHNlLCByb3dGaWVsZCk7XG4gIGhhbmRsZUlucHV0KGZhbHNlLCBjb2xGaWVsZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGVhcihcbiAgYnV0dG9uU3RhcnQ6IEhUTUxCdXR0b25FbGVtZW50LFxuICBidXR0b25DbGVhcjogSFRNTEJ1dHRvbkVsZW1lbnQsXG4gIHJvdzogbnVtYmVyLFxuICBjb2w6IG51bWJlclxuKTogdm9pZCB7XG4gIGNsZWFyVGFibGUoKTtcbiAgY29uc3QgbnVtYmVyQWxpdmU6IG51bWJlciA9IGdldENvdW50QWxpdmVDZWxscygpO1xuICBoYW5kbGVCdXR0b24obnVtYmVyQWxpdmUsIGJ1dHRvbkNsZWFyKTtcbiAgaGFuZGxlQnV0dG9uKG51bWJlckFsaXZlLCBidXR0b25TdGFydCk7XG4gIHN0b3JhZ2VBcnJheUFsaXZlU2F2ZShnZXRBbGl2ZUxpc3Qocm93LCBjb2wpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVkaXRGaWVsZChcbiAgZXZlbnQ6IEV2ZW50LFxuICB0YWJsZTogSFRNTFRhYmxlRWxlbWVudCxcbiAgcm93RmllbGQ6IEhUTUxJbnB1dEVsZW1lbnQsXG4gIGNvbEZpZWxkOiBIVE1MSW5wdXRFbGVtZW50LFxuICByYW5nZTogSFRNTElucHV0RWxlbWVudCxcbiAgYnV0dG9uU3RhcnQ6IEhUTUxCdXR0b25FbGVtZW50LFxuICBidXR0b25DbGVhcjogSFRNTEJ1dHRvbkVsZW1lbnRcbik6IHZvaWQge1xuICBjb25zdCBlbGVtZW50ID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuZ2V0QXR0cmlidXRlKFwiaWRcIik7XG4gIGNvbnN0IFtyb3dBY3R1YWwsIGNvbEFjdHVhbF0gPSBnZXRBY3R1YWxUYWJsZSh0YWJsZSk7XG4gIGxldCBjb25maWdEYXRhID0gZ2V0U3RvcmFnZUNvbmZpZygpO1xuICBpZiAoZWxlbWVudCA9PT0gXCJyb3dGaWVsZFwiKSB7XG4gICAgY29uc3QgZGF0YVJvd3MgPSBOdW1iZXIocm93RmllbGQudmFsdWUpO1xuICAgIGFsaXZlQ2VsbCA9IGdldENoYW5nZVRhYmxlKHJvd0FjdHVhbCwgY29sQWN0dWFsLCBkYXRhUm93cywgdHJ1ZSk7XG4gICAgZ2V0TWFya3VwVGFibGUoYWxpdmVDZWxsLCB0YWJsZSk7XG4gICAgY29uZmlnRGF0YSA9IHtcbiAgICAgIHZhbHVlUm93czogZGF0YVJvd3MsXG4gICAgICBtaW5Sb3dzOiBjb25maWdEYXRhLm1pblJvd3MsXG4gICAgICBtYXhSb3dzOiBjb25maWdEYXRhLm1heFJvd3MsXG4gICAgICBzdGVwUm93czogY29uZmlnRGF0YS5zdGVwUm93cyxcbiAgICAgIHZhbHVlQ29sczogY29uZmlnRGF0YS52YWx1ZUNvbHMsXG4gICAgICBtaW5Db2xzOiBjb25maWdEYXRhLm1pbkNvbHMsXG4gICAgICBtYXhDb2xzOiBjb25maWdEYXRhLm1heENvbHMsXG4gICAgICBzdGVwQ29sczogY29uZmlnRGF0YS5zdGVwQ29scyxcbiAgICAgIHZhbHVlUmFuZ2U6IGNvbmZpZ0RhdGEudmFsdWVSYW5nZSxcbiAgICAgIG1pblJhbmdlOiBjb25maWdEYXRhLm1pblJhbmdlLFxuICAgICAgbWF4UmFuZ2U6IGNvbmZpZ0RhdGEubWF4UmFuZ2UsXG4gICAgICBzdGVwUmFuZ2U6IGNvbmZpZ0RhdGEuc3RlcFJhbmdlLFxuICAgICAgaW50ZXJ2YWw6IGNvbmZpZ0RhdGEuaW50ZXJ2YWxcbiAgICB9O1xuICB9IGVsc2UgaWYgKGVsZW1lbnQgPT09IFwiY29sRmllbGRcIikge1xuICAgIGNvbnN0IGRhdGFDb2xzID0gTnVtYmVyKGNvbEZpZWxkLnZhbHVlKTtcbiAgICBhbGl2ZUNlbGwgPSBnZXRDaGFuZ2VUYWJsZShyb3dBY3R1YWwsIGNvbEFjdHVhbCwgZGF0YUNvbHMsIGZhbHNlKTtcbiAgICBnZXRNYXJrdXBUYWJsZShhbGl2ZUNlbGwsIHRhYmxlKTtcbiAgICBjb25maWdEYXRhID0ge1xuICAgICAgdmFsdWVSb3dzOiBjb25maWdEYXRhLnZhbHVlUm93cyxcbiAgICAgIG1pblJvd3M6IGNvbmZpZ0RhdGEubWluUm93cyxcbiAgICAgIG1heFJvd3M6IGNvbmZpZ0RhdGEubWF4Um93cyxcbiAgICAgIHN0ZXBSb3dzOiBjb25maWdEYXRhLnN0ZXBSb3dzLFxuICAgICAgdmFsdWVDb2xzOiBkYXRhQ29scyxcbiAgICAgIG1pbkNvbHM6IGNvbmZpZ0RhdGEubWluQ29scyxcbiAgICAgIG1heENvbHM6IGNvbmZpZ0RhdGEubWF4Q29scyxcbiAgICAgIHN0ZXBDb2xzOiBjb25maWdEYXRhLnN0ZXBDb2xzLFxuICAgICAgdmFsdWVSYW5nZTogY29uZmlnRGF0YS52YWx1ZVJhbmdlLFxuICAgICAgbWluUmFuZ2U6IGNvbmZpZ0RhdGEubWluUmFuZ2UsXG4gICAgICBtYXhSYW5nZTogY29uZmlnRGF0YS5tYXhSYW5nZSxcbiAgICAgIHN0ZXBSYW5nZTogY29uZmlnRGF0YS5zdGVwUmFuZ2UsXG4gICAgICBpbnRlcnZhbDogY29uZmlnRGF0YS5pbnRlcnZhbFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaW50ZXJ2YWxEYXRhID0gTnVtYmVyKHJhbmdlLnZhbHVlKTtcbiAgICBjb25zdCBpbnRlcnZhbFZhbHVlID0gZ2V0SW50ZXJ2YWwoaW50ZXJ2YWxEYXRhKTtcblxuICAgIGNvbmZpZ0RhdGEgPSB7XG4gICAgICB2YWx1ZVJvd3M6IGNvbmZpZ0RhdGEudmFsdWVSb3dzLFxuICAgICAgbWluUm93czogY29uZmlnRGF0YS5taW5Sb3dzLFxuICAgICAgbWF4Um93czogY29uZmlnRGF0YS5tYXhSb3dzLFxuICAgICAgc3RlcFJvd3M6IGNvbmZpZ0RhdGEuc3RlcFJvd3MsXG4gICAgICB2YWx1ZUNvbHM6IGNvbmZpZ0RhdGEudmFsdWVDb2xzLFxuICAgICAgbWluQ29sczogY29uZmlnRGF0YS5taW5Db2xzLFxuICAgICAgbWF4Q29sczogY29uZmlnRGF0YS5tYXhDb2xzLFxuICAgICAgc3RlcENvbHM6IGNvbmZpZ0RhdGEuc3RlcENvbHMsXG4gICAgICB2YWx1ZVJhbmdlOiBpbnRlcnZhbERhdGEsXG4gICAgICBtaW5SYW5nZTogY29uZmlnRGF0YS5taW5SYW5nZSxcbiAgICAgIG1heFJhbmdlOiBjb25maWdEYXRhLm1heFJhbmdlLFxuICAgICAgc3RlcFJhbmdlOiBjb25maWdEYXRhLnN0ZXBSYW5nZSxcbiAgICAgIGludGVydmFsOiBpbnRlcnZhbFZhbHVlXG4gICAgfTtcbiAgfVxuICBzdG9yYWdlQ29uZmlnKGNvbmZpZ0RhdGEpO1xuICBjb25zdCBudW1iZXJBbGl2ZTogbnVtYmVyID0gZ2V0Q291bnRBbGl2ZUNlbGxzKCk7XG4gIGlmIChudW1iZXJBbGl2ZSA8PSAwICYmICFidXR0b25DbGVhci5kaXNhYmxlZCAmJiAhYnV0dG9uU3RhcnQuZGlzYWJsZWQpIHtcbiAgICBoYW5kbGVCdXR0b24obnVtYmVyQWxpdmUsIGJ1dHRvbkNsZWFyKTtcbiAgICBoYW5kbGVCdXR0b24obnVtYmVyQWxpdmUsIGJ1dHRvblN0YXJ0KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmFnZSgpOiB2b2lkIHtcbiAgY29uc3QgY29uZmlnRGF0YUFjdHVhbCA9IGdldFN0b3JhZ2VDb25maWcoKTtcbiAgaWYoY29uZmlnRGF0YUFjdHVhbCA9PT0gbnVsbCkge1xuICAgIGNvbnN0IGNvbmZpZ0R0ID0ge1xuICAgICAgdmFsdWVSb3dzOiBjb25maWcudmFsdWVSb3dzLFxuICAgICAgbWluUm93czogY29uZmlnLm1pblJvd3MsXG4gICAgICBtYXhSb3dzOiBjb25maWcubWF4Um93cyxcbiAgICAgIHN0ZXBSb3dzOiBjb25maWcuc3RlcFJvd3MsXG4gICAgICB2YWx1ZUNvbHM6IGNvbmZpZy52YWx1ZUNvbHMsXG4gICAgICBtaW5Db2xzOiBjb25maWcubWluQ29scyxcbiAgICAgIG1heENvbHM6IGNvbmZpZy5tYXhDb2xzLFxuICAgICAgc3RlcENvbHM6IGNvbmZpZy5zdGVwQ29scyxcbiAgICAgIHZhbHVlUmFuZ2U6IGNvbmZpZy52YWx1ZVJhbmdlLFxuICAgICAgbWluUmFuZ2U6IGNvbmZpZy5taW5SYW5nZSxcbiAgICAgIG1heFJhbmdlOiBjb25maWcubWF4UmFuZ2UsXG4gICAgICBzdGVwUmFuZ2U6IGNvbmZpZy5zdGVwUmFuZ2UsXG4gICAgICBpbnRlcnZhbDogY29uZmlnLmludGVydmFsXG4gICAgfTtcbiAgICBzdG9yYWdlQ29uZmlnKGNvbmZpZ0R0KTtcbiAgfVxuXG4gIGxldCBhbGl2ZVN0b3JhZ2UgPSBnZXRTdG9yYWdlQXJyYXlBbGl2ZSgpO1xuICBpZihhbGl2ZVN0b3JhZ2UgPT09IG51bGwpIHtcbiAgICBzdG9yYWdlQXJyYXlBbGl2ZVNhdmUoZ2V0QWxpdmVMaXN0KGNvbmZpZy52YWx1ZVJvd3MsIGNvbmZpZy52YWx1ZUNvbHMpKTtcbiAgICBhbGl2ZVN0b3JhZ2UgPSBnZXRTdG9yYWdlQXJyYXlBbGl2ZSgpO1xuICB9XG5cbiAgaWYoYWxpdmVTdG9yYWdlICE9PSBudWxsKSB7XG4gICAgY29uc3Qgcm93cyA9IE51bWJlcihhbGl2ZVN0b3JhZ2UubGVuZ3RoKTtcbiAgICBjb25zdCBjb2xzID0gTnVtYmVyKGFsaXZlU3RvcmFnZVswXS5sZW5ndGgpO1xuXG4gICAgaWYoXG4gICAgICByb3dzICE9PSBOdW1iZXIoY29uZmlnRGF0YUFjdHVhbC52YWx1ZVJvd3MpIHx8XG4gICAgICBjb2xzICE9PSBOdW1iZXIoY29uZmlnRGF0YUFjdHVhbC52YWx1ZUNvbHMpXG4gICAgKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnYXJyYXlBbGl2ZScpO1xuICAgICAgY29uc3QgYXJyYXlBbGl2ZSA9IFxuICAgICAgICBnZXRBbGl2ZUxpc3QoY29uZmlnRGF0YUFjdHVhbC52YWx1ZVJvd3MsIGNvbmZpZ0RhdGFBY3R1YWwudmFsdWVDb2xzKTtcbiAgICAgIHN0b3JhZ2VBcnJheUFsaXZlU2F2ZShhcnJheUFsaXZlKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZnVuY3Rpb24gZXJyb3JNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdO1xuICBjb25zdCBtZXNzYWdlSWROb3RGb3VuZDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBib2R5LmFwcGVuZENoaWxkKG1lc3NhZ2VJZE5vdEZvdW5kKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcIkVycm9yXCIpO1xuICBtZXNzYWdlSWROb3RGb3VuZC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIkVycm9yXCIpO1xuICBtZXNzYWdlSWROb3RGb3VuZC5pbm5lckhUTUwgPSBtZXNzYWdlO1xufVxuIiwiaW1wb3J0IHsgZ2V0QWxpdmVMaXN0LCBnZXRJbnRlcnZhbCB9IGZyb20gXCIuL2V4dHJhRnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBnZXRNYXJrdXBUYWJsZSB9IGZyb20gXCIuL2NvbnRyb2xcIjtcbmltcG9ydCB7IGdldFN0b3JhZ2VDb25maWcgfSBmcm9tIFwiLi9zdG9yYWdlXCI7XG5pbXBvcnQgeyBlcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi9lcnJvck1lc3NhZ2VcIjtcblxuZnVuY3Rpb24gbWFya3VwKGVsZW06IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gIGNvbnN0IGNvbmZpZ0RhdGEgPSBnZXRTdG9yYWdlQ29uZmlnKCk7XG5cbiAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gIGVsZW0uYXBwZW5kQ2hpbGQod3JhcHBlcikuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ3cmFwcGVyXCIpO1xuICBjb25zdCBjb250ZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndyYXBwZXJcIikhO1xuXG4gIGNvbnN0IGhlYWRlcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaGVhZGVyXCIpO1xuICBjb250ZW50LmFwcGVuZENoaWxkKGhlYWRlcikuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJoZWFkZXJcIik7XG5cbiAgY29uc3QgdGl0bGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICBoZWFkZXIuYXBwZW5kQ2hpbGQodGl0bGUpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGl0bGVcIik7XG4gIHRpdGxlLmlubmVySFRNTCA9IFwiR2FtZSBvZiBMaWZlXCI7XG5cbiAgY29uc3QgbWFpbjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibWFpblwiKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChtYWluKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcIm1haW5cIik7XG5cbiAgY29uc3QgZm9vdGVyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb290ZXJcIik7XG4gIGVsZW0uYXBwZW5kQ2hpbGQoZm9vdGVyKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImZvb3RlclwiKTtcblxuICBjb25zdCBmb3JtOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG1haW4uYXBwZW5kQ2hpbGQoZm9ybSkuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJmb3JtXCIpO1xuICBmb3JtLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZm9ybVwiKTtcblxuICAvLyBSb3cgaW5wdXRcbiAgY29uc3QgZm9ybUl0ZW1Sb3dzOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoZm9ybUl0ZW1Sb3dzKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImZvcm0taXRlbVwiKTtcblxuICBjb25zdCByb3dzRmllbGQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBmb3JtSXRlbVJvd3MuYXBwZW5kQ2hpbGQocm93c0ZpZWxkKS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInJvd0ZpZWxkXCIpO1xuICByb3dzRmllbGQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJpbnB1dFwiKTtcbiAgcm93c0ZpZWxkLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJudW1iZXJcIik7XG5cbiAgY29uc3Qgcm93c0xhYmVsOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgZm9ybUl0ZW1Sb3dzLmFwcGVuZENoaWxkKHJvd3NMYWJlbCkuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwicm93RmllbGRcIik7XG4gIHJvd3NMYWJlbC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImxhYmVsXCIpO1xuICByb3dzTGFiZWwuaW5uZXJIVE1MID0gXCJSb3dzXCI7XG5cbiAgZm9ybUl0ZW1Sb3dzLmFwcGVuZENoaWxkKHJvd3NGaWVsZCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInJvd0ZpZWxkXCIpO1xuICByb3dzRmllbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgU3RyaW5nKGNvbmZpZ0RhdGEudmFsdWVSb3dzKSk7XG4gIHJvd3NGaWVsZC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgU3RyaW5nKGNvbmZpZ0RhdGEubWluUm93cykpO1xuICByb3dzRmllbGQuc2V0QXR0cmlidXRlKFwibWF4XCIsIFN0cmluZyhjb25maWdEYXRhLm1heFJvd3MpKTtcbiAgcm93c0ZpZWxkLnNldEF0dHJpYnV0ZShcInN0ZXBcIiwgU3RyaW5nKGNvbmZpZ0RhdGEuc3RlcFJvd3MpKTtcbiAgcm93c0ZpZWxkLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIiwgXCJyZXBsYWNlcih0aGlzKVwiKTtcblxuICAvLyBDb2wgaW5wdXRcbiAgY29uc3QgZm9ybUl0ZW1Db2xzOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoZm9ybUl0ZW1Db2xzKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImZvcm0taXRlbVwiKTtcblxuICBjb25zdCBjb2xGaWVsZDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGZvcm1JdGVtQ29scy5hcHBlbmRDaGlsZChjb2xGaWVsZCkuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjb2xGaWVsZFwiKTtcbiAgY29sRmllbGQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJpbnB1dFwiKTtcbiAgY29sRmllbGQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcIm51bWJlclwiKTtcblxuICBjb25zdCBjb2xzTGFiZWw6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICBmb3JtSXRlbUNvbHMuYXBwZW5kQ2hpbGQoY29sc0xhYmVsKS5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgXCJjb2xGaWVsZFwiKTtcbiAgY29sc0xhYmVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwibGFiZWxcIik7XG4gIGNvbHNMYWJlbC5pbm5lckhUTUwgPSBcIkNvbHNcIjtcblxuICBmb3JtSXRlbUNvbHMuYXBwZW5kQ2hpbGQoY29sRmllbGQpLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJjb2xGaWVsZFwiKTtcbiAgY29sRmllbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgU3RyaW5nKGNvbmZpZ0RhdGEudmFsdWVDb2xzKSk7XG4gIGNvbEZpZWxkLnNldEF0dHJpYnV0ZShcIm1pblwiLCBTdHJpbmcoY29uZmlnRGF0YS5taW5Db2xzKSk7XG4gIGNvbEZpZWxkLnNldEF0dHJpYnV0ZShcIm1heFwiLCBTdHJpbmcoY29uZmlnRGF0YS5tYXhDb2xzKSk7XG4gIGNvbEZpZWxkLnNldEF0dHJpYnV0ZShcInN0ZXBcIiwgU3RyaW5nKGNvbmZpZ0RhdGEuc3RlcENvbHMpKTtcbiAgY29sRmllbGQuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLCBcInJlcGxhY2VyKHRoaXMpXCIpO1xuICBcbiAgLy8gUmFuZ2UgaW5wdXRcbiAgY29uc3QgZm9ybUl0ZW1SYW5nZTogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb3JtLmFwcGVuZENoaWxkKGZvcm1JdGVtUmFuZ2UpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZm9ybS1pdGVtXCIpO1xuXG4gIGNvbnN0IHJhbmdlRmllbGQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBmb3JtSXRlbVJhbmdlLmFwcGVuZENoaWxkKHJhbmdlRmllbGQpLnNldEF0dHJpYnV0ZShcImlkXCIsIFwicmFuZ2VcIik7XG4gIHJhbmdlRmllbGQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJyYW5nZVwiKTtcbiAgcmFuZ2VGaWVsZC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwicmFuZ2VcIik7XG5cbiAgY29uc3QgcmFuZ2VMYWJlbDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIGZvcm1JdGVtUmFuZ2UuYXBwZW5kQ2hpbGQocmFuZ2VMYWJlbCkuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwicmFuZ2VcIik7XG4gIHJhbmdlTGFiZWwuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJsYWJlbFwiKTtcbiAgcmFuZ2VMYWJlbC5pbm5lckhUTUwgPSBcIlNwZWVkXCI7XG5cbiAgZm9ybUl0ZW1SYW5nZS5hcHBlbmRDaGlsZChyYW5nZUZpZWxkKS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIFwidGlja21hcmtzXCIpO1xuICByYW5nZUZpZWxkLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFN0cmluZyhjb25maWdEYXRhLnZhbHVlUmFuZ2UpKTtcbiAgcmFuZ2VGaWVsZC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgU3RyaW5nKGNvbmZpZ0RhdGEubWluUmFuZ2UpKTtcbiAgcmFuZ2VGaWVsZC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgU3RyaW5nKGNvbmZpZ0RhdGEubWF4UmFuZ2UpKTtcbiAgcmFuZ2VGaWVsZC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIFN0cmluZyhjb25maWdEYXRhLnN0ZXBSYW5nZSkpO1xuXG4gIGZvcm1JdGVtUmFuZ2UuYXBwZW5kQ2hpbGQocmFuZ2VGaWVsZCkuc2V0QXR0cmlidXRlKFwibGlzdFwiLCBcInRpY2ttYXJrc1wiKTtcbiAgY29uc3QgZGF0YWxpc3Q6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRhdGFsaXN0XCIpO1xuICBmb3JtSXRlbVJhbmdlLmFwcGVuZENoaWxkKGRhdGFsaXN0KS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInRpY2ttYXJrc1wiKTtcblxuICBmb3IgKFxuICAgIGxldCBqID0gY29uZmlnRGF0YS5taW5SYW5nZTtcbiAgICBqIDw9IGNvbmZpZ0RhdGEubWF4UmFuZ2U7XG4gICAgaiArPSBjb25maWdEYXRhLnN0ZXBSYW5nZVxuICApIHtcbiAgICBjb25zdCBvcHRpb246IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICBkYXRhbGlzdC5hcHBlbmRDaGlsZChvcHRpb24pLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFN0cmluZyhqKSk7XG4gICAgb3B0aW9uLnNldEF0dHJpYnV0ZShcImxhYmVsXCIsIFN0cmluZyhqKSk7XG4gICAgY29uc3QgaW50ZXJ2YWxWYWx1ZSA9IGdldEludGVydmFsKGopO1xuICAgIGlmIChpbnRlcnZhbFZhbHVlID09PSBjb25maWdEYXRhLmludGVydmFsKSB7XG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwic2VsZWN0ZWRcIixcInNlbGVjdGVkXCIpO1xuICAgIH1cbiAgICBvcHRpb24uaW5uZXJIVE1MID0gU3RyaW5nKGopO1xuICB9XG5cbiAgaWYgKGNvbmZpZ0RhdGEudmFsdWVSb3dzID4gMiB8fCBjb25maWdEYXRhLnZhbHVlQ29scyA+IDIpIHtcbiAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKSBhcyBIVE1MVGFibGVFbGVtZW50O1xuICAgIG1haW4uYXBwZW5kQ2hpbGQodGFibGUpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGFibGVcIik7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0YWJsZVwiKTtcbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJib3JkZXJcIiwgXCIwXCIpO1xuICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcImNlbGxwYWRkaW5nXCIsIFwiMFwiKTtcbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJjZWxsc3BhY2luZ1wiLCBcIjBcIik7XG4gICAgY29uc3QgYWxpdmVMaXN0OiBudW1iZXJbXVtdID0gZ2V0QWxpdmVMaXN0KFxuICAgICAgY29uZmlnRGF0YS52YWx1ZVJvd3MsXG4gICAgICBjb25maWdEYXRhLnZhbHVlQ29sc1xuICAgICk7XG4gICAgZ2V0TWFya3VwVGFibGUoYWxpdmVMaXN0LCB0YWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgZXJyb3JNZXNzYWdlKFwiRXJyb3I6IHNtYWxsIGlucHV0IHZhbHVlc1wiKTtcbiAgfVxuXG4gIGNvbnN0IGNvbnRyb2w6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgbWFpbi5hcHBlbmRDaGlsZChjb250cm9sKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNvbnRyb2xcIik7XG4gIGNvbnRyb2wuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJjb250cm9sXCIpO1xuXG4gIC8vIEJ1dHRvbiBzdGFydFxuICBjb25zdCBidXR0b25TdGFydDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjb250cm9sLmFwcGVuZENoaWxkKGJ1dHRvblN0YXJ0KS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xuICBidXR0b25TdGFydC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImJ1dHRvblN0YXJ0XCIpO1xuICBidXR0b25TdGFydC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImJ1dHRvblwiKTtcbiAgYnV0dG9uU3RhcnQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgYnV0dG9uU3RhcnQuaW5uZXJIVE1MID0gXCJTdGFydFwiO1xuICBcbiAgLy8gQnV0dG9uIHN0b3BcbiAgY29uc3QgYnV0dG9uU3RvcDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBjb250cm9sLmFwcGVuZENoaWxkKGJ1dHRvblN0b3ApLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gIGJ1dHRvblN0b3Auc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJidXR0b25TdG9wXCIpO1xuICBidXR0b25TdG9wLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiYnV0dG9uXCIpO1xuICBidXR0b25TdG9wLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gIGJ1dHRvblN0b3AuaW5uZXJIVE1MID0gXCJTdG9wXCI7XG5cbiAgLy8gQnV0dG9uIGNsZWFyXG4gIGNvbnN0IGJ1dHRvbkNsZWFyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGNvbnRyb2wuYXBwZW5kQ2hpbGQoYnV0dG9uQ2xlYXIpLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XG4gIGJ1dHRvbkNsZWFyLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiYnV0dG9uQ2xlYXJcIik7XG4gIGJ1dHRvbkNsZWFyLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiYnV0dG9uXCIpO1xuICBidXR0b25DbGVhci5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuICBidXR0b25DbGVhci5pbm5lckhUTUwgPSBcIkNsZWFyXCI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcmt1cDtcbiIsImltcG9ydCB7XG4gIGhhbmRsZXJUYWJsZUNsaWNrLFxuICBnZXRTdGFydCxcbiAgZ2V0U3RvcCxcbiAgZ2V0Q2xlYXIsXG4gIGdldEVkaXRGaWVsZCxcbn0gZnJvbSBcIi4vbWFpblwiO1xuXG5pbXBvcnQgeyBnZXRBbGl2ZUxpc3QgfSBmcm9tIFwiLi9leHRyYUZ1bmN0aW9uc1wiO1xuXG5pbXBvcnQge1xuICBzdG9yYWdlQXJyYXlBbGl2ZVNhdmUsXG4gIGdldFN0b3JhZ2VDb25maWdcbn0gZnJvbSBcIi4vc3RvcmFnZVwiO1xuXG5jb25zdCBjb25maWdEYXRhID0gZ2V0U3RvcmFnZUNvbmZpZygpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XG4gIGNvbnN0IHJvdyA9IGNvbmZpZ0RhdGEudmFsdWVSb3dzO1xuICBjb25zdCBjb2wgPSBjb25maWdEYXRhLnZhbHVlQ29scztcbiAgc3RvcmFnZUFycmF5QWxpdmVTYXZlKGdldEFsaXZlTGlzdChyb3csIGNvbCkpO1xuXG4gIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YWJsZVwiKSBhcyBIVE1MVGFibGVFbGVtZW50O1xuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb3JtXCIpIGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCByb3dGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm93RmllbGRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgY29uc3QgY29sRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbEZpZWxkXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGNvbnN0IGJ1dHRvblN0YXJ0ID1cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvblN0YXJ0XCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICBjb25zdCBidXR0b25TdG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25TdG9wXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICBjb25zdCBidXR0b25DbGVhciA9XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25DbGVhclwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbiAgY29uc3QgcmFuZ2VGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmFuZ2VcIikgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICB0YWJsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PlxuICAgIGhhbmRsZXJUYWJsZUNsaWNrKGV2ZW50LCBidXR0b25TdGFydCwgYnV0dG9uQ2xlYXIpXG4gICk7XG5cbiAgYnV0dG9uU3RhcnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+XG4gICAgZ2V0U3RhcnQoXG4gICAgICB0YWJsZSxcbiAgICAgIHJhbmdlRmllbGQsXG4gICAgICBidXR0b25TdG9wLFxuICAgICAgYnV0dG9uU3RhcnQsXG4gICAgICBidXR0b25DbGVhcixcbiAgICAgIHJvd0ZpZWxkLFxuICAgICAgY29sRmllbGRcbiAgICApXG4gICk7XG5cbiAgYnV0dG9uU3RvcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cbiAgICBnZXRTdG9wKGJ1dHRvblN0b3AsIGJ1dHRvblN0YXJ0LCBidXR0b25DbGVhciwgcm93RmllbGQsIGNvbEZpZWxkKVxuICApO1xuXG4gIGJ1dHRvbkNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxuICAgIGdldENsZWFyKGJ1dHRvblN0YXJ0LCBidXR0b25DbGVhciwgcm93LCBjb2wpXG4gICk7XG5cbiAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChldmVudCkgPT5cbiAgICBnZXRFZGl0RmllbGQoXG4gICAgICBldmVudCxcbiAgICAgIHRhYmxlLFxuICAgICAgcm93RmllbGQsXG4gICAgICBjb2xGaWVsZCxcbiAgICAgIHJhbmdlRmllbGQsXG4gICAgICBidXR0b25TdGFydCxcbiAgICAgIGJ1dHRvbkNsZWFyXG4gICAgKVxuICApO1xufVxuIiwiaW1wb3J0IFwiLi9zdHlsZXMvc3R5bGVzLnNjc3NcIjtcbmltcG9ydCB7IGNyZWF0ZVN0b3JhZ2UgfSBmcm9tIFwiLi90cy9tYWluXCI7XG5pbXBvcnQgbWFya3VwIGZyb20gXCIuL3RzL21hcmt1cFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi90cy9oYW5kbGVyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRBcHAoKSB7XG4gIGNvbnN0IGFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpIGFzIEhUTUxEaXZFbGVtZW50O1xuICBjcmVhdGVTdG9yYWdlKCk7XG4gIG1hcmt1cChhcHApO1xuICBBcHAoKTtcbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgc3RhcnRBcHApO1xuIl0sIm5hbWVzIjpbImNvbmZpZyIsInZhbHVlUm93cyIsIm1pblJvd3MiLCJtYXhSb3dzIiwic3RlcFJvd3MiLCJ2YWx1ZUNvbHMiLCJtaW5Db2xzIiwibWF4Q29scyIsInN0ZXBDb2xzIiwidmFsdWVSYW5nZSIsIm1pblJhbmdlIiwibWF4UmFuZ2UiLCJzdGVwUmFuZ2UiLCJpbnRlcnZhbCIsInN0b3JhZ2VBcnJheUFsaXZlU2F2ZSIsImFycmF5QWxpdmUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldFN0b3JhZ2VBcnJheUFsaXZlIiwicGFyc2UiLCJnZXRJdGVtIiwic3RvcmFnZUNvbmZpZyIsImNvbmZpZ0RhdGEiLCJnZXRTdG9yYWdlQ29uZmlnIiwiZ2V0QWxpdmVMaXN0Iiwicm93IiwiY29sIiwiYWxpdmVMaXN0RW1wdHkiLCJpIiwiaiIsImNvdW50ZXJBcm91bmRDZWxsIiwicm93Q3VyZW50IiwiY29sQ3VyZW50IiwiYWxpdmVDZWxsIiwic3VtIiwicm93U3RhcnQiLCJyb3dGaW5pc2giLCJjb2xTdGFydCIsImNvbEZpbmlzaCIsIk51bWJlciIsInNldENvbmRpdGlvbkNlbGwiLCJhcnJheUNvdW50ZXJzIiwiYXJyYXlBbGl2ZU5ldyIsImdldEludGVydmFsIiwidmFsdWUiLCJpbnRlcnZhbEFycmF5IiwiZ2V0TWFya3VwVGFibGUiLCJ0YmwiLCJ0YWJsZSIsImlubmVySFRNTCIsImNsYXNzZXMiLCJzcGxpdCIsImxlbmd0aCIsInRyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJzZXRBdHRyaWJ1dGUiLCJ0ZCIsImRhdGFzZXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJnZXRQb3NDbGljayIsImV2ZW50IiwiY2VsbCIsInRhcmdldCIsImNvb3JkWSIsImNvb3JkWCIsImdldFRvZ2dsZUNsYXNzIiwiY29vcmRzIiwiY29vcmRzWSIsImNvb3Jkc1giLCJxdWVyeVNlbGVjdG9yQWxsIiwidG9nZ2xlIiwiZ2V0TmV3QWxpdmVMaXN0IiwiY29vcmROZXciLCJhcnJheSIsImFycmF5TmV3Iiwic2xpY2UiLCJjbGVhclRhYmxlIiwicXVlcnlTZWxlY3RvciIsImNlbGxzQWxpdmUiLCJyZW1vdmUiLCJnZXRDb3VudEFsaXZlQ2VsbHMiLCJoYW5kbGVCdXR0b24iLCJudW1iZXJBbGl2ZSIsImJ0biIsImJ1dHRvbiIsImRpc2FibGVkIiwiaGFuZGxlSW5wdXQiLCJpc0Rpc2FibGVkIiwiaW50IiwiaW5wdXQiLCJnZXRVcGRhdGVBcnJheSIsImNvdW50ZXJBbGl2ZUFyb3VuZCIsImdldFVwZGF0ZVRhYmxlIiwidG9FcXVhbEFyciIsImFycmF5MSIsImFycmF5MiIsImV2ZXJ5IiwidmFsdWUxIiwidmFsdWUyIiwiZ2V0Q2hhbmdlVGFibGUiLCJuZXdWYWx1ZSIsImlzUm93IiwibmV3VmFsdWVOdW0iLCJyb3dGaWVsZCIsImdldEVsZW1lbnRCeUlkIiwiU3RyaW5nIiwiZGVsQ2VsbCIsInNwbGljZSIsInB1c2giLCJjb2xGaWVsZCIsImdldEFjdHVhbFRhYmxlIiwibnVtUm93cyIsImFyclJvd3MiLCJudW1Db2xzIiwidGltZXJJZCIsImhhbmRsZXJUYWJsZUNsaWNrIiwiYnV0dG9uU3RhcnQiLCJidXR0b25DbGVhciIsImFsaXZlTGlzdE5ldyIsInRpY2siLCJyYW5nZUZpZWxkIiwiYnV0dG9uU3RvcCIsImFyciIsInRpbWVJbnRlcnZhbCIsImVxdWFsQXJyIiwiY2xlYXJUaW1lb3V0Iiwid2luZG93Iiwic2V0VGltZW91dCIsImdldFN0YXJ0IiwiZ2V0U3RvcCIsImdldENsZWFyIiwiZ2V0RWRpdEZpZWxkIiwicmFuZ2UiLCJlbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwicm93QWN0dWFsIiwiY29sQWN0dWFsIiwiZGF0YVJvd3MiLCJkYXRhQ29scyIsImludGVydmFsRGF0YSIsImludGVydmFsVmFsdWUiLCJjcmVhdGVTdG9yYWdlIiwiY29uZmlnRGF0YUFjdHVhbCIsImNvbmZpZ0R0IiwiYWxpdmVTdG9yYWdlIiwicm93cyIsImNvbHMiLCJyZW1vdmVJdGVtIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsImJvZHkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm1lc3NhZ2VJZE5vdEZvdW5kIiwibWFya3VwIiwiZWxlbSIsIndyYXBwZXIiLCJjb250ZW50IiwiaGVhZGVyIiwidGl0bGUiLCJtYWluIiwiZm9vdGVyIiwiZm9ybSIsImZvcm1JdGVtUm93cyIsInJvd3NGaWVsZCIsInJvd3NMYWJlbCIsImZvcm1JdGVtQ29scyIsImNvbHNMYWJlbCIsImZvcm1JdGVtUmFuZ2UiLCJyYW5nZUxhYmVsIiwiZGF0YWxpc3QiLCJvcHRpb24iLCJhbGl2ZUxpc3QiLCJjb250cm9sIiwiQXBwIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0YXJ0QXBwIiwiYXBwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///734\n')}},__webpack_exports__={};__webpack_modules__[734]()})();