(function(){"use strict";var __webpack_modules__={734:function(){eval('\n// UNUSED EXPORTS: startApp\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n;// CONCATENATED MODULE: ./src/ts/config.ts\n// settings\nvar config = {\n  valueRows: 5,\n  minRows: 3,\n  maxRows: 20,\n  stepRows: 1,\n  valueCols: 5,\n  minCols: 3,\n  maxCols: 20,\n  stepCols: 1,\n  valueRange: 3,\n  minRange: 1,\n  maxRange: 5,\n  stepRange: 1,\n  interval: 1000\n};\n/* harmony default export */ const ts_config = (config);\n;// CONCATENATED MODULE: ./src/ts/storage.ts\n\nfunction storageArrayAliveSave(arrayAlive) {\n  localStorage.setItem("arrayAlive", JSON.stringify(arrayAlive));\n}\nfunction getStorageArrayAlive() {\n  return JSON.parse(localStorage.getItem("arrayAlive"));\n}\nfunction storageConfig(configData) {\n  localStorage.setItem("config", JSON.stringify(configData));\n}\nfunction storage_getStorageConfig() {\n  var configData = JSON.parse(localStorage.getItem("config"));\n\n  if (configData === null) {\n    configData = {\n      valueRows: ts_config.valueRows,\n      minRows: ts_config.minRows,\n      maxRows: ts_config.maxRows,\n      stepRows: ts_config.stepRows,\n      valueCols: ts_config.valueCols,\n      minCols: ts_config.minCols,\n      maxCols: ts_config.maxCols,\n      stepCols: ts_config.stepCols,\n      valueRange: ts_config.valueRange,\n      minRange: ts_config.minRange,\n      maxRange: ts_config.maxRange,\n      stepRange: ts_config.stepRange,\n      interval: ts_config.interval\n    };\n    storageConfig(configData);\n  }\n\n  return configData;\n}\n;// CONCATENATED MODULE: ./src/ts/extraFunctions.ts\n\nfunction getAliveList(row, col) {\n  var aliveListEmpty = [];\n\n  for (var i = 0; i < row; i += 1) {\n    aliveListEmpty[i] = [];\n\n    for (var j = 0; j < col; j += 1) {\n      aliveListEmpty[i][j] = 0;\n    }\n  }\n\n  return aliveListEmpty;\n}\nfunction counterAroundCell(rowCurent, colCurent) {\n  var aliveCell = getStorageArrayAlive();\n  var configData = storage_getStorageConfig();\n  var sum = 0;\n  var rowStart;\n  var rowFinish;\n  var colStart;\n  var colFinish;\n\n  if (rowCurent - 1 < 0) {\n    rowStart = 0;\n  } else {\n    rowStart = rowCurent - 1;\n  }\n\n  if (rowCurent + 1 >= configData.valueRows) {\n    rowFinish = rowCurent;\n  } else {\n    rowFinish = rowCurent + 1;\n  }\n\n  if (colCurent - 1 < 0) {\n    colStart = 0;\n  } else {\n    colStart = colCurent - 1;\n  }\n\n  if (colCurent + 1 >= configData.valueCols) {\n    colFinish = colCurent;\n  } else {\n    colFinish = colCurent + 1;\n  }\n\n  for (var i = rowStart; i <= rowFinish; i += 1) {\n    for (var j = colStart; j <= colFinish; j += 1) {\n      if (i !== rowCurent || j !== colCurent) {\n        sum += Number(aliveCell[i][j]);\n      }\n    }\n  }\n\n  return sum;\n}\nfunction setConditionCell(arrayCounters, row, col) {\n  var arrayAlive = getStorageArrayAlive();\n  var arrayAliveNew = getAliveList(row, col);\n\n  for (var i = 0; i < row; i += 1) {\n    for (var j = 0; j < col; j += 1) {\n      if (arrayAlive[i][j] === 1) {\n        if (arrayCounters[i][j] < 2 || arrayCounters[i][j] > 3) {\n          arrayAliveNew[i][j] = 0;\n        } else {\n          arrayAliveNew[i][j] = 1;\n        }\n      } else if (arrayCounters[i][j] === 3) {\n        arrayAliveNew[i][j] = 1;\n      }\n    }\n  }\n\n  return arrayAliveNew;\n}\nfunction getInterval(value) {\n  var intervalArray = [2500, 2000, 1500, 1000, 500];\n  return intervalArray[value - 1];\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n;// CONCATENATED MODULE: ./src/ts/control.ts\n\n\n\nfunction getMarkupTable(arrayAlive, tbl) {\n  var table = tbl;\n  table.innerHTML = "";\n  var classes = "cell cell_alive".split(" ");\n\n  for (var i = 0; i < arrayAlive.length; i += 1) {\n    var tr = document.createElement("tr");\n    table.appendChild(tr).setAttribute("class", "row");\n\n    for (var j = 0; j < arrayAlive[i].length; j += 1) {\n      var td = document.createElement("td");\n      tr.appendChild(td).setAttribute("class", "cell");\n      td.dataset.row = "".concat(i);\n      td.dataset.col = "".concat(j);\n\n      if (arrayAlive[i][j] === 1) {\n        var _td$classList;\n\n        (_td$classList = td.classList).add.apply(_td$classList, _toConsumableArray(classes));\n      }\n    }\n  }\n}\nfunction getPosClick(event) {\n  var cell = event.target;\n  var coordY = cell.dataset.row;\n  var coordX = cell.dataset.col;\n  return [coordY, coordX];\n}\nfunction getToggleClass(coords) {\n  var coordsY = Number(coords[0]);\n  var coordsX = Number(coords[1]);\n  var cell = document.querySelectorAll("td[data-row=\'".concat(coordsY, "\'][data-col=\'").concat(coordsX, "\']"));\n  cell[0].classList.toggle("cell_alive");\n}\nfunction getNewAliveList(coordNew) {\n  var array = getStorageArrayAlive();\n  var row = Number(coordNew[0]);\n  var col = Number(coordNew[1]);\n  var arrayNew = array.slice();\n\n  if (array[row][col]) {\n    arrayNew[row][col] = 0;\n  } else {\n    arrayNew[row][col] = 1;\n  }\n\n  return arrayNew;\n}\nfunction clearTable() {\n  var table = document.querySelector("#table");\n  var cellsAlive = table.querySelectorAll("td.cell_alive");\n\n  for (var i = 0; i < cellsAlive.length; i += 1) {\n    cellsAlive[i].classList.remove("cell_alive");\n  }\n}\nfunction getCountAliveCells() {\n  var table = document.querySelector("#table");\n  return table.querySelectorAll("td.cell_alive").length;\n}\nfunction handleButton(numberAlive, btn) {\n  var button = btn;\n\n  if (numberAlive <= 0) {\n    button.disabled = true;\n  } else {\n    button.disabled = false;\n  }\n}\nfunction handleInput(isDisabled, int) {\n  var input = int;\n\n  if (isDisabled) {\n    input.disabled = true;\n  } else {\n    input.disabled = false;\n  }\n}\nfunction getUpdateArray(row, col) {\n  var counterAliveAround = getAliveList(row, col);\n\n  for (var i = 0; i < row; i += 1) {\n    for (var j = 0; j < col; j += 1) {\n      counterAliveAround[i][j] = counterAroundCell(i, j);\n    }\n  }\n\n  return setConditionCell(counterAliveAround, row, col);\n}\nfunction getUpdateTable(row, col) {\n  var arrayAlive = getStorageArrayAlive();\n\n  for (var i = 0; i < row; i += 1) {\n    for (var j = 0; j < col; j += 1) {\n      var cell = document.querySelectorAll("td[data-row=\'".concat(i, "\'][data-col=\'").concat(j, "\']"));\n      cell[0].classList.remove("cell_alive");\n\n      if (arrayAlive[i][j] === 1) {\n        cell[0].classList.add("cell_alive");\n      }\n    }\n  }\n}\nfunction toEqualArr(array1, array2) {\n  return array1.every(function (value1, i) {\n    return array1[i].every(function (value2, j) {\n      return value2 === array2[i][j];\n    });\n  });\n}\nfunction getChangeTable(row, col, newValue, isRow) {\n  var newValueNum = newValue;\n  var arrayAlive = getStorageArrayAlive();\n  var configData = storage_getStorageConfig();\n\n  if (isRow) {\n    var rowField = document.getElementById("rowField");\n\n    if (row >= newValueNum) {\n      if (newValueNum < configData.minRows) {\n        newValueNum = configData.minRows;\n        rowField.value = String(newValueNum);\n      }\n\n      var delCell = row - newValueNum;\n      arrayAlive.splice(arrayAlive.length - delCell, delCell);\n    } else {\n      if (newValueNum > configData.maxRows) {\n        newValueNum = configData.maxRows;\n        rowField.value = String(newValueNum);\n      }\n\n      for (var j = row; j < newValueNum; j += 1) {\n        arrayAlive.push([]);\n\n        for (var i = 0; i < col; i += 1) {\n          arrayAlive[j].push(0);\n        }\n      }\n    }\n  } else {\n    var colField = document.getElementById("colField");\n\n    for (var _i = 0; _i < row; _i += 1) {\n      if (col >= newValueNum) {\n        if (newValueNum < configData.minCols) {\n          newValueNum = configData.minCols;\n          colField.value = String(newValueNum);\n        }\n\n        var _delCell = col - newValueNum;\n\n        arrayAlive[_i].splice(arrayAlive[_i].length - _delCell, _delCell);\n      } else {\n        if (newValueNum > configData.maxCols) {\n          newValueNum = configData.maxCols;\n          colField.value = String(newValueNum);\n        }\n\n        for (var _j = col; _j < newValueNum; _j += 1) {\n          arrayAlive[_i].push(0);\n        }\n      }\n    }\n  }\n\n  storageArrayAliveSave(arrayAlive);\n  return arrayAlive;\n}\nfunction getActualTable(table) {\n  var numRows = table.querySelectorAll("tr").length;\n  var arrRows = table.querySelectorAll("tr");\n  var numCols = arrRows[0].querySelectorAll("td").length;\n  return [Number(numRows), Number(numCols)];\n}\nfunction control_getInterval() {\n  var configData = getStorageConfig();\n  return configData.interval;\n}\n;// CONCATENATED MODULE: ./src/ts/main.ts\n\n\n\n\n\nvar timerId;\nvar aliveCell = [];\nfunction handlerTableClick(event, buttonStart, buttonClear) {\n  var coords = getPosClick(event);\n  getToggleClass(coords);\n  var numberAlive = getCountAliveCells();\n  handleButton(numberAlive, buttonClear);\n  handleButton(numberAlive, buttonStart);\n  var aliveListNew = getNewAliveList(coords);\n  storageArrayAliveSave(aliveListNew);\n}\nfunction tick(table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField) {\n  var arr = getStorageArrayAlive();\n  var configData = storage_getStorageConfig();\n  var timeInterval = configData.interval;\n  var row = configData.valueRows;\n  var col = configData.valueCols;\n  aliveCell = getUpdateArray(row, col);\n  getUpdateTable(row, col);\n  storageArrayAliveSave(aliveCell);\n  var equalArr = toEqualArr(arr, aliveCell);\n\n  if (getCountAliveCells() <= 0) {\n    clearTimeout(timerId);\n    getAliveList(row, col);\n    handleButton(0, buttonStop);\n    handleInput(false, rowField);\n    handleInput(false, colField);\n  } else if (equalArr) {\n    clearTimeout(timerId);\n    getAliveList(row, col);\n    handleButton(0, buttonStop);\n    handleButton(1, buttonStart);\n    handleButton(1, buttonClear);\n    handleInput(false, rowField);\n    handleInput(false, colField);\n  } else {\n    timerId = window.setTimeout(tick, timeInterval, table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField);\n  }\n}\nfunction getStart(table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField) {\n  var configData = storage_getStorageConfig();\n  var interval = configData.valueRange;\n  var numberAlive = getCountAliveCells();\n  handleButton(numberAlive, buttonStop);\n  handleButton(0, buttonClear);\n  handleButton(0, buttonStart);\n  handleInput(true, rowField);\n  handleInput(true, colField);\n  setTimeout(tick, interval, table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField);\n}\nfunction getStop(buttonStop, buttonStart, buttonClear, rowField, colField) {\n  var numberAlive = getCountAliveCells();\n  clearTimeout(timerId);\n  handleButton(0, buttonStop);\n  handleButton(numberAlive, buttonClear);\n  handleButton(numberAlive, buttonStart);\n  handleInput(false, rowField);\n  handleInput(false, colField);\n}\nfunction getClear(buttonStart, buttonClear, row, col) {\n  clearTable();\n  var numberAlive = getCountAliveCells();\n  handleButton(numberAlive, buttonClear);\n  handleButton(numberAlive, buttonStart);\n  storageArrayAliveSave(getAliveList(row, col));\n}\nfunction getEditField(event, table, rowField, colField, range, buttonStart, buttonClear) {\n  var element = event.target.getAttribute("id");\n\n  var _getActualTable = getActualTable(table),\n      _getActualTable2 = _slicedToArray(_getActualTable, 2),\n      rowActual = _getActualTable2[0],\n      colActual = _getActualTable2[1];\n\n  var configData = storage_getStorageConfig();\n\n  if (element === "rowField") {\n    var dataRows = Number(rowField.value);\n    aliveCell = getChangeTable(rowActual, colActual, dataRows, true);\n    getMarkupTable(aliveCell, table);\n    configData = {\n      valueRows: dataRows,\n      minRows: configData.minRows,\n      maxRows: configData.maxRows,\n      stepRows: configData.stepRows,\n      valueCols: configData.valueCols,\n      minCols: configData.minCols,\n      maxCols: configData.maxCols,\n      stepCols: configData.stepCols,\n      valueRange: configData.valueRange,\n      minRange: configData.minRange,\n      maxRange: configData.maxRange,\n      stepRange: configData.stepRange,\n      interval: configData.interval\n    };\n  } else if (element === "colField") {\n    var dataCols = Number(colField.value);\n    aliveCell = getChangeTable(rowActual, colActual, dataCols, false);\n    getMarkupTable(aliveCell, table);\n    configData = {\n      valueRows: configData.valueRows,\n      minRows: configData.minRows,\n      maxRows: configData.maxRows,\n      stepRows: configData.stepRows,\n      valueCols: dataCols,\n      minCols: configData.minCols,\n      maxCols: configData.maxCols,\n      stepCols: configData.stepCols,\n      valueRange: configData.valueRange,\n      minRange: configData.minRange,\n      maxRange: configData.maxRange,\n      stepRange: configData.stepRange,\n      interval: configData.interval\n    };\n  } else {\n    var intervalData = Number(range.value);\n    var intervalValue = getInterval(intervalData);\n    configData = {\n      valueRows: configData.valueRows,\n      minRows: configData.minRows,\n      maxRows: configData.maxRows,\n      stepRows: configData.stepRows,\n      valueCols: configData.valueCols,\n      minCols: configData.minCols,\n      maxCols: configData.maxCols,\n      stepCols: configData.stepCols,\n      valueRange: intervalData,\n      minRange: configData.minRange,\n      maxRange: configData.maxRange,\n      stepRange: configData.stepRange,\n      interval: intervalValue\n    };\n  }\n\n  storageConfig(configData);\n  var numberAlive = getCountAliveCells();\n\n  if (numberAlive <= 0 && !buttonClear.disabled && !buttonStart.disabled) {\n    handleButton(numberAlive, buttonClear);\n    handleButton(numberAlive, buttonStart);\n  }\n}\nfunction createStorage() {\n  var configDataActual = storage_getStorageConfig();\n\n  if (configDataActual === null) {\n    var configDt = {\n      valueRows: ts_config.valueRows,\n      minRows: ts_config.minRows,\n      maxRows: ts_config.maxRows,\n      stepRows: ts_config.stepRows,\n      valueCols: ts_config.valueCols,\n      minCols: ts_config.minCols,\n      maxCols: ts_config.maxCols,\n      stepCols: ts_config.stepCols,\n      valueRange: ts_config.valueRange,\n      minRange: ts_config.minRange,\n      maxRange: ts_config.maxRange,\n      stepRange: ts_config.stepRange,\n      interval: ts_config.interval\n    };\n    storageConfig(configDt);\n  }\n\n  var aliveStorage = getStorageArrayAlive();\n\n  if (aliveStorage === null) {\n    storageArrayAliveSave(getAliveList(ts_config.valueRows, ts_config.valueCols));\n    aliveStorage = getStorageArrayAlive();\n  }\n\n  if (aliveStorage !== null) {\n    var rows = Number(aliveStorage.length);\n    var cols = Number(aliveStorage[0].length);\n\n    if (rows !== Number(configDataActual.valueRows) || cols !== Number(configDataActual.valueCols)) {\n      localStorage.removeItem("arrayAlive");\n      var arrayAlive = getAliveList(configDataActual.valueRows, configDataActual.valueCols);\n      storageArrayAliveSave(arrayAlive);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./src/ts/errorMessage.ts\nfunction errorMessage(message) {\n  var body = document.getElementsByTagName("body")[0];\n  var messageIdNotFound = document.createElement("div");\n  body.appendChild(messageIdNotFound).setAttribute("class", "Error");\n  messageIdNotFound.setAttribute("id", "Error");\n  messageIdNotFound.innerHTML = message;\n}\n;// CONCATENATED MODULE: ./src/ts/markup.ts\n\n\n\n\n\nfunction markup(elem) {\n  var configData = storage_getStorageConfig();\n  var wrapper = document.createElement("div");\n  elem.appendChild(wrapper).setAttribute("class", "wrapper");\n  var content = document.querySelector(".wrapper");\n  var header = document.createElement("header");\n  content.appendChild(header).setAttribute("class", "header");\n  var title = document.createElement("h1");\n  header.appendChild(title).setAttribute("class", "title");\n  title.innerHTML = "Game of Life";\n  var main = document.createElement("main");\n  content.appendChild(main).setAttribute("class", "main");\n  var footer = document.createElement("footer");\n  elem.appendChild(footer).setAttribute("class", "footer");\n  var form = document.createElement("div");\n  main.appendChild(form).setAttribute("class", "form");\n  form.setAttribute("id", "form"); // Row input\n\n  var formItemRows = document.createElement("div");\n  form.appendChild(formItemRows).setAttribute("class", "form-item");\n  var rowsField = document.createElement("input");\n  formItemRows.appendChild(rowsField).setAttribute("id", "rowField");\n  rowsField.setAttribute("class", "input");\n  rowsField.setAttribute("type", "number");\n  var rowsLabel = document.createElement("label");\n  formItemRows.appendChild(rowsLabel).setAttribute("for", "rowField");\n  rowsLabel.setAttribute("class", "label");\n  rowsLabel.innerHTML = "Rows";\n  formItemRows.appendChild(rowsField).setAttribute("name", "rowField");\n  rowsField.setAttribute("value", String(configData.valueRows));\n  rowsField.setAttribute("min", String(configData.minRows));\n  rowsField.setAttribute("max", String(configData.maxRows));\n  rowsField.setAttribute("step", String(configData.stepRows));\n  rowsField.setAttribute("oninput", "replacer(this)"); // Col input\n\n  var formItemCols = document.createElement("div");\n  form.appendChild(formItemCols).setAttribute("class", "form-item");\n  var colField = document.createElement("input");\n  formItemCols.appendChild(colField).setAttribute("id", "colField");\n  colField.setAttribute("class", "input");\n  colField.setAttribute("type", "number");\n  var colsLabel = document.createElement("label");\n  formItemCols.appendChild(colsLabel).setAttribute("for", "colField");\n  colsLabel.setAttribute("class", "label");\n  colsLabel.innerHTML = "Cols";\n  formItemCols.appendChild(colField).setAttribute("name", "colField");\n  colField.setAttribute("value", String(configData.valueCols));\n  colField.setAttribute("min", String(configData.minCols));\n  colField.setAttribute("max", String(configData.maxCols));\n  colField.setAttribute("step", String(configData.stepCols));\n  colField.setAttribute("oninput", "replacer(this)"); // Range input\n\n  var formItemRange = document.createElement("div");\n  form.appendChild(formItemRange).setAttribute("class", "form-item");\n  var rangeField = document.createElement("input");\n  formItemRange.appendChild(rangeField).setAttribute("id", "range");\n  rangeField.setAttribute("class", "range");\n  rangeField.setAttribute("type", "range");\n  var rangeLabel = document.createElement("label");\n  formItemRange.appendChild(rangeLabel).setAttribute("for", "range");\n  rangeLabel.setAttribute("class", "label");\n  rangeLabel.innerHTML = "Speed";\n  formItemRange.appendChild(rangeField).setAttribute("name", "tickmarks");\n  rangeField.setAttribute("value", String(configData.valueRange));\n  rangeField.setAttribute("min", String(configData.minRange));\n  rangeField.setAttribute("max", String(configData.maxRange));\n  rangeField.setAttribute("step", String(configData.stepRange));\n  formItemRange.appendChild(rangeField).setAttribute("list", "tickmarks");\n  var datalist = document.createElement("datalist");\n  formItemRange.appendChild(datalist).setAttribute("id", "tickmarks");\n\n  for (var j = configData.minRange; j <= configData.maxRange; j += configData.stepRange) {\n    var option = document.createElement("option");\n    datalist.appendChild(option).setAttribute("value", String(j));\n    option.setAttribute("label", String(j));\n    var intervalValue = getInterval(j);\n\n    if (intervalValue === configData.interval) {\n      option.setAttribute("selected", "selected");\n    }\n\n    option.innerHTML = String(j);\n  }\n\n  if (configData.valueRows > 2 || configData.valueCols > 2) {\n    var table = document.createElement("table");\n    main.appendChild(table).setAttribute("class", "table");\n    table.setAttribute("id", "table");\n    table.setAttribute("border", "0");\n    table.setAttribute("cellpadding", "0");\n    table.setAttribute("cellspacing", "0");\n    var aliveList = getAliveList(configData.valueRows, configData.valueCols);\n    getMarkupTable(aliveList, table);\n  } else {\n    errorMessage("Error: small input values");\n  }\n\n  var control = document.createElement("div");\n  main.appendChild(control).setAttribute("class", "control");\n  control.setAttribute("id", "control"); // Button start\n\n  var buttonStart = document.createElement("button");\n  control.appendChild(buttonStart).setAttribute("type", "button");\n  buttonStart.setAttribute("id", "buttonStart");\n  buttonStart.setAttribute("class", "button");\n  buttonStart.setAttribute("disabled", "disabled");\n  buttonStart.innerHTML = "Start"; // Button stop\n\n  var buttonStop = document.createElement("button");\n  control.appendChild(buttonStop).setAttribute("type", "button");\n  buttonStop.setAttribute("id", "buttonStop");\n  buttonStop.setAttribute("class", "button");\n  buttonStop.setAttribute("disabled", "disabled");\n  buttonStop.innerHTML = "Stop"; // Button clear\n\n  var buttonClear = document.createElement("button");\n  control.appendChild(buttonClear).setAttribute("type", "button");\n  buttonClear.setAttribute("id", "buttonClear");\n  buttonClear.setAttribute("class", "button");\n  buttonClear.setAttribute("disabled", "disabled");\n  buttonClear.innerHTML = "Clear";\n}\n\n/* harmony default export */ const ts_markup = (markup);\n;// CONCATENATED MODULE: ./src/ts/handlers.ts\n\n\n\nvar configData = storage_getStorageConfig();\nfunction App() {\n  var row = configData.valueRows;\n  var col = configData.valueCols;\n  storageArrayAliveSave(getAliveList(row, col));\n  var table = document.getElementById("table");\n  var form = document.getElementById("form");\n  var rowField = document.getElementById("rowField");\n  var colField = document.getElementById("colField");\n  var buttonStart = document.getElementById("buttonStart");\n  var buttonStop = document.getElementById("buttonStop");\n  var buttonClear = document.getElementById("buttonClear");\n  var rangeField = document.getElementById("range");\n  table.addEventListener("click", function (event) {\n    return handlerTableClick(event, buttonStart, buttonClear);\n  });\n  buttonStart.addEventListener("click", function () {\n    return getStart(table, rangeField, buttonStop, buttonStart, buttonClear, rowField, colField);\n  });\n  buttonStop.addEventListener("click", function () {\n    return getStop(buttonStop, buttonStart, buttonClear, rowField, colField);\n  });\n  buttonClear.addEventListener("click", function () {\n    return getClear(buttonStart, buttonClear, row, col);\n  });\n  form.addEventListener("change", function (event) {\n    return getEditField(event, table, rowField, colField, rangeField, buttonStart, buttonClear);\n  });\n}\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\nfunction startApp() {\n  var app = document.getElementById("app");\n  createStorage();\n  ts_markup(app);\n  App();\n}\ndocument.addEventListener("DOMContentLoaded", startApp);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///734\n')}},__webpack_exports__={};__webpack_modules__[734]()})();